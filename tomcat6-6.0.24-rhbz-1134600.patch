--- java/javax/servlet/http/HttpServlet.java.orig	2015-12-09 16:29:42.301160714 -0500
+++ java/javax/servlet/http/HttpServlet.java	2015-12-09 16:30:17.826998111 -0500
@@ -616,7 +616,13 @@
                 // to go through further expensive logic
                 doGet(req, resp);
             } else {
-                long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);
+                long ifModifiedSince;
+                try {
+                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);
+                } catch (IllegalArgumentException iae) {
+                    // Invalid date header - proceed as if none was set
+                    ifModifiedSince = -1;
+                }
                 if (ifModifiedSince < (lastModified / 1000 * 1000)) {
                     // If the servlet mod time is later, call doGet()
                     // Round down to the nearest second for a proper compare
@@ -751,6 +757,36 @@
         didSetContentLength = true;
     }
 
+    public void setHeader(String name, String value) {
+        super.setHeader(name, value);
+        checkHeader(name);
+    }
+
+    @Override
+    public void addHeader(String name, String value) {
+        super.addHeader(name, value);
+        checkHeader(name);
+    }
+
+    @Override
+    public void setIntHeader(String name, int value) {
+        super.setIntHeader(name, value);
+        checkHeader(name);
+    }
+
+    @Override
+    public void addIntHeader(String name, int value) {
+        super.addIntHeader(name, value);
+        checkHeader(name);
+    }
+
+    private void checkHeader(String name) {
+        if ("content-length".equalsIgnoreCase(name)) {
+            didSetContentLength = true;
+        }
+    }
+
+    @Override
     public ServletOutputStream getOutputStream() throws IOException {
         return noBody;
     }
--- java/javax/servlet/http/HttpServletResponse.java.orig	2015-12-09 16:29:42.302160710 -0500
+++ java/javax/servlet/http/HttpServletResponse.java	2015-12-09 16:30:17.826998111 -0500
@@ -131,41 +131,41 @@
     public String encodeRedirectUrl(String url);
 
     /**
-     * Sends an error response to the client using the specified
-     * status.  The server defaults to creating the
-     * response to look like an HTML-formatted server error page
-     * containing the specified message, setting the content type
-     * to "text/html", leaving cookies and other headers unmodified.
-     *
-     * If an error-page declaration has been made for the web application
-     * corresponding to the status code passed in, it will be served back in 
-     * preference to the suggested msg parameter. 
-     *
-     * <p>If the response has already been committed, this method throws 
-     * an IllegalStateException.
-     * After using this method, the response should be considered
-     * to be committed and should not be written to.
-     *
-     * @param	sc	the error status code
-     * @param	msg	the descriptive message
-     * @exception	IOException	If an input or output exception occurs
-     * @exception	IllegalStateException	If the response was committed
+     * Sends an error response to the client using the specified status code and
+     * clears the output buffer. The server defaults to creating the response to
+     * look like an HTML-formatted server error page containing the specified
+     * message, setting the content type to "text/html", leaving cookies and
+     * other headers unmodified. If an error-page declaration has been made for
+     * the web application corresponding to the status code passed in, it will
+     * be served back in preference to the suggested msg parameter.
+     * <p>
+     * If the response has already been committed, this method throws an
+     * IllegalStateException. After using this method, the response should be
+     * considered to be committed and should not be written to.
+     * 
+     * @param sc
+     *            the error status code
+     * @param msg
+     *            the descriptive message
+     * @exception IOException
+     *                If an input or output exception occurs
+     * @exception IllegalStateException
+     *                If the response was committed
      */
    
     public void sendError(int sc, String msg) throws IOException;
 
     /**
-     * Sends an error response to the client using the specified status
-     * code and clearing the buffer. 
-     * <p>If the response has already been committed, this method throws 
-     * an IllegalStateException.
-     * After using this method, the response should be considered
-     * to be committed and should not be written to.
-     *
-     * @param	sc	the error status code
-     * @exception	IOException	If an input or output exception occurs
-     * @exception	IllegalStateException	If the response was committed
-     *						before this method call
+     * Sends an error response to the client using the specified status code and
+     * clears the buffer. This is equivalent to calling {@link #sendError(int,
+     * String)} with the same status code and <code>null</code> for the message.
+     * 
+     * @param sc
+     *            the error status code
+     * @exception IOException
+     *                If an input or output exception occurs
+     * @exception IllegalStateException
+     *                If the response was committed before this method call
      */
 
     public void sendError(int sc) throws IOException;
--- java/javax/servlet/http/HttpSession.java.orig	2015-12-09 16:29:42.303160705 -0500
+++ java/javax/servlet/http/HttpSession.java	2015-12-09 16:30:17.827998107 -0500
@@ -27,34 +27,34 @@
  * <p>The servlet container uses this interface to create a session
  * between an HTTP client and an HTTP server. The session persists
  * for a specified time period, across more than one connection or
- * page request from the user. A session usually corresponds to one 
- * user, who may visit a site many times. The server can maintain a 
+ * page request from the user. A session usually corresponds to one
+ * user, who may visit a site many times. The server can maintain a
  * session in many ways such as using cookies or rewriting URLs.
  *
- * <p>This interface allows servlets to 
+ * <p>This interface allows servlets to
  * <ul>
  * <li>View and manipulate information about a session, such as
  *     the session identifier, creation time, and last accessed time
- * <li>Bind objects to sessions, allowing user information to persist 
+ * <li>Bind objects to sessions, allowing user information to persist
  *     across multiple user connections
  * </ul>
  *
  * <p>When an application stores an object in or removes an object from a
  * session, the session checks whether the object implements
- * {@link HttpSessionBindingListener}. If it does, 
- * the servlet notifies the object that it has been bound to or unbound 
- * from the session. Notifications are sent after the binding methods complete. 
+ * {@link HttpSessionBindingListener}. If it does,
+ * the servlet notifies the object that it has been bound to or unbound
+ * from the session. Notifications are sent after the binding methods complete.
  * For session that are invalidated or expire, notifications are sent after
  * the session has been invalidated or expired.
  *
  * <p> When container migrates a session between VMs in a distributed container
  * setting, all session attributes implementing the {@link HttpSessionActivationListener}
  * interface are notified.
- * 
+ *
  * <p>A servlet should be able to handle cases in which
  * the client does not choose to join a session, such as when cookies are
  * intentionally turned off. Until the client joins the session,
- * <code>isNew</code> returns <code>true</code>.  If the client chooses 
+ * <code>isNew</code> returns <code>true</code>.  If the client chooses
  * not to join
  * the session, <code>getSession</code> will return a different session
  * on each request, and <code>isNew</code> will always return
@@ -85,7 +85,7 @@
      *
      * @return				a <code>long</code> specifying
      * 					when this session was created,
-     *					expressed in 
+     *					expressed in
      *					milliseconds since 1/1/1970 GMT
      *
      * @exception IllegalStateException	if this method is called on an
@@ -94,16 +94,16 @@
      */
 
     public long getCreationTime();
-    
-    
-    
-    
+
+
+
+
     /**
      *
-     * Returns a string containing the unique identifier assigned 
-     * to this session. The identifier is assigned 
+     * Returns a string containing the unique identifier assigned
+     * to this session. The identifier is assigned
      * by the servlet container and is implementation dependent.
-     * 
+     *
      * @return				a string specifying the identifier
      *					assigned to this session
      *
@@ -113,24 +113,24 @@
      */
 
     public String getId();
-    
-    
-    
+
+
+
 
     /**
      *
      * Returns the last time the client sent a request associated with
      * this session, as the number of milliseconds since midnight
-     * January 1, 1970 GMT, and marked by the time the container received the request. 
+     * January 1, 1970 GMT, and marked by the time the container received the request.
      *
      * <p>Actions that your application takes, such as getting or setting
      * a value associated with the session, do not affect the access
      * time.
      *
      * @return				a <code>long</code>
-     *					representing the last time 
+     *					representing the last time
      *					the client sent a request associated
-     *					with this session, expressed in 
+     *					with this session, expressed in
      *					milliseconds since 1/1/1970 GMT
      *
      * @exception IllegalStateException	if this method is called on an
@@ -139,11 +139,11 @@
      */
 
     public long getLastAccessedTime();
-    
-    
+
+
     /**
     * Returns the ServletContext to which this session belongs.
-    *    
+    *
     * @return The ServletContext object for the web application
     * @since 2.3
     */
@@ -153,28 +153,28 @@
 
     /**
      *
-     * Specifies the time, in seconds, between client requests before the 
+     * Specifies the time, in seconds, between client requests before the
      * servlet container will invalidate this session.  A negative time
      * indicates the session should never timeout.
      *
      * @param interval		An integer specifying the number
-     * 				of seconds 
+     * 				of seconds
      *
      */
-    
+
     public void setMaxInactiveInterval(int interval);
 
 
 
 
    /**
-    * Returns the maximum time interval, in seconds, that 
-    * the servlet container will keep this session open between 
+    * Returns the maximum time interval, in seconds, that
+    * the servlet container will keep this session open between
     * client accesses. After this interval, the servlet container
     * will invalidate the session.  The maximum time interval can be set
     * with the <code>setMaxInactiveInterval</code> method.
     * A negative time indicates the session should never timeout.
-    *  
+    *
     *
     * @return		an integer specifying the number of
     *			seconds this session remains open
@@ -186,8 +186,8 @@
     */
 
     public int getMaxInactiveInterval();
-    
-    
+
+
 
 
    /**
@@ -200,10 +200,10 @@
     */
 
     public HttpSessionContext getSessionContext();
-    
-    
-    
-    
+
+
+
+
     /**
      *
      * Returns the object bound with the specified name in this session, or
@@ -217,12 +217,12 @@
      *					invalidated session
      *
      */
-  
+
     public Object getAttribute(String name);
-    
-    
-    
-    
+
+
+
+
     /**
      *
      * @deprecated 	As of Version 2.2, this method is
@@ -236,18 +236,18 @@
      *					invalidated session
      *
      */
-  
+
     public Object getValue(String name);
-    
-    
-    
+
+
+
 
     /**
      *
      * Returns an <code>Enumeration</code> of <code>String</code> objects
-     * containing the names of all the objects bound to this session. 
+     * containing the names of all the objects bound to this session.
      *
-     * @return			an <code>Enumeration</code> of 
+     * @return			an <code>Enumeration</code> of
      *				<code>String</code> objects specifying the
      *				names of all the objects bound to
      *				this session
@@ -256,11 +256,11 @@
      *					invalidated session
      *
      */
-    
+
     public Enumeration getAttributeNames();
-    
-    
-    
+
+
+
 
     /**
      *
@@ -276,11 +276,11 @@
      *					invalidated session
      *
      */
-    
+
     public String[] getValueNames();
-    
-    
-    
+
+
+
 
     /**
      * Binds an object to this session, using the name specified.
@@ -289,17 +289,17 @@
      *
      * <p>After this method executes, and if the new object
      * implements <code>HttpSessionBindingListener</code>,
-     * the container calls 
-     * <code>HttpSessionBindingListener.valueBound</code>. The container then   
-     * notifies any <code>HttpSessionAttributeListener</code>s in the web 
+     * the container calls
+     * <code>HttpSessionBindingListener.valueBound</code>. The container then
+     * notifies any <code>HttpSessionAttributeListener</code>s in the web
      * application.
-     
+
      * <p>If an object was already bound to this session of this name
-     * that implements <code>HttpSessionBindingListener</code>, its 
+     * that implements <code>HttpSessionBindingListener</code>, its
      * <code>HttpSessionBindingListener.valueUnbound</code> method is called.
      *
-     * <p>If the value passed in is null, this has the same effect as calling 
-     * <code>removeAttribute()<code>.
+     * <p>If the value passed in is null, this has the same effect as calling
+     * <code>removeAttribute()</code>.
      *
      *
      * @param name			the name to which the object is bound;
@@ -311,13 +311,13 @@
      *					invalidated session
      *
      */
- 
+
     public void setAttribute(String name, Object value);
-    
 
 
 
-    
+
+
     /**
      *
      * @deprecated 	As of Version 2.2, this method is
@@ -332,7 +332,7 @@
      *					invalidated session
      *
      */
- 
+
     public void putValue(String name, Object value);
 
 
@@ -347,12 +347,12 @@
      *
      * <p>After this method executes, and if the object
      * implements <code>HttpSessionBindingListener</code>,
-     * the container calls 
+     * the container calls
      * <code>HttpSessionBindingListener.valueUnbound</code>. The container
-     * then notifies any <code>HttpSessionAttributeListener</code>s in the web 
+     * then notifies any <code>HttpSessionAttributeListener</code>s in the web
      * application.
-     * 
-     * 
+     *
+     *
      *
      * @param name				the name of the object to
      *						remove from this session
@@ -387,7 +387,7 @@
     /**
      *
      * Invalidates this session then unbinds any objects bound
-     * to it. 
+     * to it.
      *
      * @exception IllegalStateException	if this method is called on an
      *					already invalidated session
@@ -395,20 +395,20 @@
      */
 
     public void invalidate();
-    
-    
-    
-    
+
+
+
+
     /**
      *
      * Returns <code>true</code> if the client does not yet know about the
-     * session or if the client chooses not to join the session.  For 
+     * session or if the client chooses not to join the session.  For
      * example, if the server used only cookie-based sessions, and
      * the client had disabled the use of cookies, then a session would
      * be new on each request.
      *
-     * @return 				<code>true</code> if the 
-     *					server has created a session, 
+     * @return 				<code>true</code> if the
+     *					server has created a session,
      *					but the client has not yet joined
      *
      * @exception IllegalStateException	if this method is called on an
--- java/javax/servlet/http/LocalStrings.properties.orig	2015-12-09 16:29:42.304160701 -0500
+++ java/javax/servlet/http/LocalStrings.properties	2015-12-09 16:30:17.827998107 -0500
@@ -20,7 +20,7 @@
 err.io.negativelength=Negative Length given in write method
 err.io.short_read=Short Read
 
-http.method_not_implemented=Method {0} is not defined in RFC 2068 and is not supported by the Servlet API 
+http.method_not_implemented=Method {0} is not is not implemented by this servlet for this URI 
 
 http.method_get_not_supported=HTTP method GET is not supported by this URL
 http.method_post_not_supported=HTTP method POST is not supported by this URL
--- java/javax/servlet/jsp/el/ELException.java.orig	2015-12-09 16:29:42.304160701 -0500
+++ java/javax/servlet/jsp/el/ELException.java	2015-12-09 16:30:17.827998107 -0500
@@ -23,14 +23,10 @@
  * operation evaluation of the evaluator.
  *
  * @since 2.0
- * @deprecated
+ * @deprecated As of JSP 2.1, replaced by javax.el.ELException
  */
-public class ELException
-  extends Exception
-{
-  //-------------------------------------
-  // Member variables
-  //-------------------------------------
+@SuppressWarnings("dep-ann") // TCK signature test fails with annotation
+public class ELException extends Exception {
 
   private Throwable mRootCause;
 
--- java/javax/servlet/jsp/el/ELParseException.java.orig	2015-12-09 16:29:42.305160696 -0500
+++ java/javax/servlet/jsp/el/ELParseException.java	2015-12-09 16:30:17.827998107 -0500
@@ -22,9 +22,9 @@
  * Represents a parsing error encountered while parsing an EL expression.
  *
  * @since 2.0
- * @deprecated
+ * @deprecated As of JSP 2.1, replaced by javax.el.ELException
  */
-
+@SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public class ELParseException extends ELException {
 
  //-------------------------------------
--- java/javax/servlet/jsp/el/ExpressionEvaluator.java.orig	2015-12-09 16:29:42.306160692 -0500
+++ java/javax/servlet/jsp/el/ExpressionEvaluator.java	2015-12-09 16:30:17.827998107 -0500
@@ -51,8 +51,9 @@
  * </p>
  *
  * @since 2.0
- * @deprecated
+ * @deprecated As of JSP 2.1, replaced by javax.el.ExpressionFactory
  */
+@SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public abstract class ExpressionEvaluator {
 
     /**
@@ -76,9 +77,10 @@
      *
      * @exception ELException Thrown if parsing errors were found.
      */ 
-    public abstract Expression parseExpression( String expression, 
-				       Class expectedType, 
-				       FunctionMapper fMapper ) 
+    public abstract Expression parseExpression( String expression,
+            @SuppressWarnings("unchecked") // TCK signature fails with generics
+            Class expectedType,
+	        FunctionMapper fMapper) 
       throws ELException; 
 
 
@@ -98,11 +100,12 @@
      * @return The result of the expression evaluation.
      *
      * @exception ELException Thrown if the expression evaluation failed.
-     */ 
-    public abstract Object evaluate( String expression, 
-			    Class expectedType, 
-			    VariableResolver vResolver,
-			    FunctionMapper fMapper ) 
+     */
+    public abstract Object evaluate( String expression,
+            @SuppressWarnings("unchecked") // TCK signature fails with generics
+		    Class expectedType,
+		    VariableResolver vResolver,
+		    FunctionMapper fMapper)
       throws ELException; 
 }
 
--- java/javax/servlet/jsp/el/Expression.java.orig	2015-12-09 16:29:42.307160687 -0500
+++ java/javax/servlet/jsp/el/Expression.java	2015-12-09 16:30:17.828998102 -0500
@@ -30,8 +30,9 @@
  * where ELParseException exceptions are raised. </p>
  *
  * @since 2.0
- * @deprecated
+ * @deprecated As of JSP 2.1, replaced by javax.el.ValueExpression
  */
+@SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public abstract class Expression {
 
     /** 
--- java/javax/servlet/jsp/el/FunctionMapper.java.orig	2015-12-09 16:29:42.308160682 -0500
+++ java/javax/servlet/jsp/el/FunctionMapper.java	2015-12-09 16:30:17.828998102 -0500
@@ -24,8 +24,9 @@
  * information to resolve the map. </p>
  *
  * @since 2.0
- * @deprecated
+ * @deprecated As of JSP 2.1, replaced by javax.el.FunctionMapper
  */
+@SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public interface FunctionMapper {
   /**
    * Resolves the specified local name and prefix into a Java.lang.Method.
--- java/javax/servlet/jsp/el/ImplicitObjectELResolver.java.orig	2015-12-09 16:29:42.309160678 -0500
+++ java/javax/servlet/jsp/el/ImplicitObjectELResolver.java	2015-12-09 16:30:17.828998102 -0500
@@ -119,6 +119,7 @@
         return null;
     }
 
+    @SuppressWarnings("unchecked") // TCK signature test fails with generics
     public Class getType(ELContext context, Object base, Object property)
             throws NullPointerException, PropertyNotFoundException, ELException {
         if (context == null) {
--- java/javax/servlet/jsp/el/ScopedAttributeELResolver.java.orig	2015-12-09 16:29:42.310160673 -0500
+++ java/javax/servlet/jsp/el/ScopedAttributeELResolver.java	2015-12-09 16:30:17.828998102 -0500
@@ -32,6 +32,10 @@
 import javax.servlet.jsp.JspContext;
 import javax.servlet.jsp.PageContext;
 
+/**
+*
+* @since 2.1
+*/
 public class ScopedAttributeELResolver extends ELResolver {
 
 	public ScopedAttributeELResolver() {
--- java/javax/servlet/jsp/el/VariableResolver.java.orig	2015-12-09 16:29:42.310160673 -0500
+++ java/javax/servlet/jsp/el/VariableResolver.java	2015-12-09 16:30:17.828998102 -0500
@@ -29,8 +29,9 @@
  * will happen</p>
  *
  * @since 2.0
- * @deprecated
+ * @deprecated As of JSP 2.1, replaced by javax.el.ELResolver
  */
+@SuppressWarnings("dep-ann") // TCK signature test fails with annotation
 public interface VariableResolver
 {
   //-------------------------------------
--- java/javax/servlet/jsp/JspContext.java.orig	2015-12-09 16:29:42.311160669 -0500
+++ java/javax/servlet/jsp/JspContext.java	2015-12-09 16:30:17.829998098 -0500
@@ -225,7 +225,7 @@
      * @deprecated As of JSP 2.1, replaced by
      *             JspApplicationContext.getExpressionFactory()
      */
-    @Deprecated
+    @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
     public abstract ExpressionEvaluator getExpressionEvaluator();
     
     
@@ -243,7 +243,7 @@
      *             which can be obtained by
      *             jspContext.getELContext().getELResolver()
      */
-    @Deprecated
+    @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
     public abstract VariableResolver getVariableResolver();
     
     /**
--- java/javax/servlet/jsp/JspFactory.java.orig	2015-12-09 16:29:42.312160664 -0500
+++ java/javax/servlet/jsp/JspFactory.java	2015-12-09 16:30:17.829998098 -0500
@@ -43,7 +43,7 @@
 
 public abstract class JspFactory {
 
-    private static JspFactory deflt = null;
+    private static volatile JspFactory deflt = null;
     
     /**
      * Sole constructor. (For invocation by subclass constructors, 
@@ -61,7 +61,7 @@
      * @param deflt	The default factory implementation
      */
 
-    public static synchronized void setDefaultFactory(JspFactory deflt) {
+    public static void setDefaultFactory(JspFactory deflt) {
 	JspFactory.deflt = deflt;
     }
 
@@ -71,7 +71,7 @@
      * @return the default factory for this implementation
      */
 
-    public static synchronized JspFactory getDefaultFactory() {
+    public static JspFactory getDefaultFactory() {
 	return deflt;
     }
 
--- java/javax/servlet/jsp/PageContext.java.orig	2015-12-09 16:29:42.312160664 -0500
+++ java/javax/servlet/jsp/PageContext.java	2015-12-09 16:30:17.829998098 -0500
@@ -512,12 +512,20 @@
      * @since 2.0
      */
     public ErrorData getErrorData() {
-	return new ErrorData( 
-	    (Throwable)getRequest().getAttribute( "javax.servlet.error.exception" ),
-	    ((Integer)getRequest().getAttribute( 
-		"javax.servlet.error.status_code" )).intValue(),
-	    (String)getRequest().getAttribute( "javax.servlet.error.request_uri" ),
-	    (String)getRequest().getAttribute( "javax.servlet.error.servlet_name" ) );
+        int status = 0;
+        
+        Integer status_code = (Integer)getRequest().getAttribute( 
+                "javax.servlet.error.status_code");
+        // Avoid NPE if attribute is not set
+        if (status_code != null) {
+            status = status_code.intValue();
+        }
+
+        return new ErrorData( 
+            (Throwable)getRequest().getAttribute( "javax.servlet.error.exception" ),
+            status,
+            (String)getRequest().getAttribute( "javax.servlet.error.request_uri" ),
+            (String)getRequest().getAttribute( "javax.servlet.error.servlet_name" ) );
     }
     
 }
--- java/javax/servlet/jsp/tagext/BodyTag.java.orig	2015-12-09 16:29:42.313160660 -0500
+++ java/javax/servlet/jsp/tagext/BodyTag.java	2015-12-09 16:30:17.829998098 -0500
@@ -122,7 +122,7 @@
      * @deprecated	As of Java JSP API 1.2, use BodyTag.EVAL_BODY_BUFFERED
      * or IterationTag.EVAL_BODY_AGAIN.
      */
- 
+    @SuppressWarnings("dep-ann") // TCK signature test fails with annotation
     public final static int EVAL_BODY_TAG = 2;
 
     /**
--- java/javax/servlet/jsp/tagext/TagSupport.java.orig	2015-12-09 16:29:42.314160655 -0500
+++ java/javax/servlet/jsp/tagext/TagSupport.java	2015-12-09 16:30:17.829998098 -0500
@@ -72,9 +72,11 @@
      * @return the nearest ancestor that implements the interface
      * or is an instance of the class specified
      */
-
-    public static final Tag findAncestorWithClass(Tag from, Class klass) {
-	boolean isInterface = false;
+    public static final Tag findAncestorWithClass(Tag from,
+            // TCK signature test fails with generics
+            @SuppressWarnings("unchecked")
+            Class klass) {
+    boolean isInterface = false;
 
 	if (from == null ||
 	    klass == null ||
--- java/javax/servlet/ServletContext.java.orig	2015-12-09 16:29:42.315160651 -0500
+++ java/javax/servlet/ServletContext.java	2015-12-09 16:30:17.832998084 -0500
@@ -24,7 +24,7 @@
 
 
 /**
- * 
+ *
  * Defines a set of methods that a servlet uses to communicate with its
  * servlet container, for example, to get the MIME type of a file, dispatch
  * requests, or write to a log file.
@@ -32,16 +32,16 @@
  * <p>There is one context per "web application" per Java Virtual Machine.  (A
  * "web application" is a collection of servlets and content installed under a
  * specific subset of the server's URL namespace such as <code>/catalog</code>
- * and possibly installed via a <code>.war</code> file.) 
+ * and possibly installed via a <code>.war</code> file.)
  *
  * <p>In the case of a web
  * application marked "distributed" in its deployment descriptor, there will
- * be one context instance for each virtual machine.  In this situation, the 
+ * be one context instance for each virtual machine.  In this situation, the
  * context cannot be used as a location to share global information (because
- * the information won't be truly global).  Use an external resource like 
+ * the information won't be truly global).  Use an external resource like
  * a database instead.
  *
- * <p>The <code>ServletContext</code> object is contained within 
+ * <p>The <code>ServletContext</code> object is contained within
  * the {@link ServletConfig} object, which the Web server provides the
  * servlet when the servlet is initialized.
  *
@@ -57,24 +57,24 @@
 
 
     /**
-     * Returns a <code>ServletContext</code> object that 
+     * Returns a <code>ServletContext</code> object that
      * corresponds to a specified URL on the server.
      *
      * <p>This method allows servlets to gain
      * access to the context for various parts of the server, and as
      * needed obtain {@link RequestDispatcher} objects from the context.
-     * The given path must be begin with "/", is interpreted relative 
+     * The given path must be begin with "/", is interpreted relative
      * to the server's document root and is matched against the context roots of
      * other web applications hosted on this container.
-     * 
+     *
      * <p>In a security conscious environment, the servlet container may
      * return <code>null</code> for a given URL.
-     *       
+     *
      * @param uripath 	a <code>String</code> specifying the context path of
      *			another web application in the container.
      * @return		the <code>ServletContext</code> object that
      *			corresponds to the named URL, or null if either
-			none exists or the container wishes to restrict 
+			none exists or the container wishes to restrict
      * 			this access.
      *
      * @see 		RequestDispatcher
@@ -82,7 +82,7 @@
      */
 
     public ServletContext getContext(String uripath);
-    
+
 
     public String getContextPath();
 
@@ -96,10 +96,10 @@
      * @return 		2
      *
      */
-    
+
     public int getMajorVersion();
-    
-    
+
+
 
     /**
      * Returns the minor version of the Servlet API that this
@@ -112,11 +112,11 @@
      */
 
     public int getMinorVersion();
-    
-    
+
+
 
     /**
-     * Returns the MIME type of the specified file, or <code>null</code> if 
+     * Returns the MIME type of the specified file, or <code>null</code> if
      * the MIME type is not known. The MIME type is determined
      * by the configuration of the servlet container, and may be specified
      * in a web application deployment descriptor. Common MIME
@@ -131,11 +131,11 @@
      */
 
     public String getMimeType(String file);
-    
+
     /**
     * Returns a directory-like listing of all the paths to resources within the web application whose longest sub-path
-    * matches the supplied path argument. Paths indicating subdirectory paths end with a '/'. The returned paths are all 
-    * relative to the root of the web application and have a leading '/'. For example, for a web application 
+    * matches the supplied path argument. Paths indicating subdirectory paths end with a '/'. The returned paths are all
+    * relative to the root of the web application and have a leading '/'. For example, for a web application
     * containing<br><br>
 
     * /welcome.html<br>
@@ -149,7 +149,7 @@
     *
     * getResourcePaths("/") returns {"/welcome.html", "/catalog/", "/customer/", "/WEB-INF/"}<br>
     * getResourcePaths("/catalog/") returns {"/catalog/index.html", "/catalog/products.html", "/catalog/offers/"}.<br>
-	   
+
 
 
     *@param path		the partial path used to match the resources,
@@ -159,20 +159,20 @@
 
     * @since Servlet 2.3
     */
-    
+
     public Set getResourcePaths(String path);
-    
-    
+
+
 
     /**
      * Returns a URL to the resource that is mapped to a specified
      * path. The path must begin with a "/" and is interpreted
      * as relative to the current context root.
      *
-     * <p>This method allows the servlet container to make a resource 
-     * available to servlets from any source. Resources 
+     * <p>This method allows the servlet container to make a resource
+     * available to servlets from any source. Resources
      * can be located on a local or remote
-     * file system, in a database, or in a <code>.war</code> file. 
+     * file system, in a database, or in a <code>.war</code> file.
      *
      * <p>The servlet container must implement the URL handlers
      * and <code>URLConnection</code> objects that are necessary
@@ -184,16 +184,16 @@
      * <p>Some containers may allow writing to the URL returned by
      * this method using the methods of the URL class.
      *
-     * <p>The resource content is returned directly, so be aware that 
+     * <p>The resource content is returned directly, so be aware that
      * requesting a <code>.jsp</code> page returns the JSP source code.
-     * Use a <code>RequestDispatcher</code> instead to include results of 
+     * Use a <code>RequestDispatcher</code> instead to include results of
      * an execution.
      *
      * <p>This method has a different purpose than
      * <code>java.lang.Class.getResource</code>,
      * which looks up resources based on a class loader. This
      * method does not use class loaders.
-     * 
+     *
      * @param path 				a <code>String</code> specifying
      *						the path to the resource
      *
@@ -201,25 +201,25 @@
      * 						or <code>null</code> if there is no resource
      *						at that path
      *
-     * @exception MalformedURLException 	if the pathname is not given in 
+     * @exception MalformedURLException 	if the pathname is not given in
      * 						the correct form
      *
      */
-    
+
     public URL getResource(String path) throws MalformedURLException;
-    
-    
+
+
 
     /**
      * Returns the resource located at the named path as
      * an <code>InputStream</code> object.
      *
-     * <p>The data in the <code>InputStream</code> can be 
+     * <p>The data in the <code>InputStream</code> can be
      * of any type or length. The path must be specified according
      * to the rules given in <code>getResource</code>.
      * This method returns <code>null</code> if no resource exists at
-     * the specified path. 
-     * 
+     * the specified path.
+     *
      * <p>Meta-information such as content length and content type
      * that is available via <code>getResource</code>
      * method is lost when using this method.
@@ -228,33 +228,33 @@
      * and <code>URLConnection</code> objects necessary to access
      * the resource.
      *
-     * <p>This method is different from 
+     * <p>This method is different from
      * <code>java.lang.Class.getResourceAsStream</code>,
-     * which uses a class loader. This method allows servlet containers 
+     * which uses a class loader. This method allows servlet containers
      * to make a resource available
      * to a servlet from any location, without using a class loader.
-     * 
+     *
      *
      * @param path 	a <code>String</code> specifying the path
      *			to the resource
      *
-     * @return 		the <code>InputStream</code> returned to the 
+     * @return 		the <code>InputStream</code> returned to the
      *			servlet, or <code>null</code> if no resource
-     *			exists at the specified path 
+     *			exists at the specified path
      *
      *
      */
 
     public InputStream getResourceAsStream(String path);
-    
+
 
 
 
     /**
-     * 
+     *
      * Returns a {@link RequestDispatcher} object that acts
      * as a wrapper for the resource located at the given path.
-     * A <code>RequestDispatcher</code> object can be used to forward 
+     * A <code>RequestDispatcher</code> object can be used to forward
      * a request to the resource or to include the resource in a response.
      * The resource can be dynamic or static.
      *
@@ -269,7 +269,7 @@
      *
      * @return 		a <code>RequestDispatcher</code> object
      *			that acts as a wrapper for the resource
-     *			at the specified path, or <code>null</code> if 
+     *			at the specified path, or <code>null</code> if
      *			the <code>ServletContext</code> cannot return
      *			a <code>RequestDispatcher</code>
      *
@@ -286,12 +286,12 @@
      * Returns a {@link RequestDispatcher} object that acts
      * as a wrapper for the named servlet.
      *
-     * <p>Servlets (and JSP pages also) may be given names via server 
+     * <p>Servlets (and JSP pages also) may be given names via server
      * administration or via a web application deployment descriptor.
-     * A servlet instance can determine its name using 
+     * A servlet instance can determine its name using
      * {@link ServletConfig#getServletName}.
      *
-     * <p>This method returns <code>null</code> if the 
+     * <p>This method returns <code>null</code> if the
      * <code>ServletContext</code>
      * cannot return a <code>RequestDispatcher</code> for any reason.
      *
@@ -310,32 +310,32 @@
      */
 
     public RequestDispatcher getNamedDispatcher(String name);
-    
-    
-    
-    
+
+
+
+
     /**
      *
      * @deprecated	As of Java Servlet API 2.1, with no direct replacement.
      *
      * <p>This method was originally defined to retrieve a servlet
-     * from a <code>ServletContext</code>. In this version, this method 
-     * always returns <code>null</code> and remains only to preserve 
-     * binary compatibility. This method will be permanently removed 
+     * from a <code>ServletContext</code>. In this version, this method
+     * always returns <code>null</code> and remains only to preserve
+     * binary compatibility. This method will be permanently removed
      * in a future version of the Java Servlet API.
      *
-     * <p>In lieu of this method, servlets can share information using the 
+     * <p>In lieu of this method, servlets can share information using the
      * <code>ServletContext</code> class and can perform shared business logic
      * by invoking methods on common non-servlet classes.
      *
      */
 
     public Servlet getServlet(String name) throws ServletException;
-    
-  
-  
-  
-    
+
+
+
+
+
 
     /**
      *
@@ -349,90 +349,90 @@
      * Servlet API.
      *
      */
-    
+
     public Enumeration getServlets();
-    
-    
-    
-    
-    
+
+
+
+
+
 
     /**
      * @deprecated	As of Java Servlet API 2.1, with no replacement.
      *
-     * <p>This method was originally defined to return an 
+     * <p>This method was originally defined to return an
      * <code>Enumeration</code>
      * of all the servlet names known to this context. In this version,
-     * this method always returns an empty <code>Enumeration</code> and 
-     * remains only to preserve binary compatibility. This method will 
+     * this method always returns an empty <code>Enumeration</code> and
+     * remains only to preserve binary compatibility. This method will
      * be permanently removed in a future version of the Java Servlet API.
      *
      */
- 
+
     public Enumeration getServletNames();
-    
-  
-  
-    
-    
+
+
+
+
+
     /**
      *
      * Writes the specified message to a servlet log file, usually
-     * an event log. The name and type of the servlet log file is 
+     * an event log. The name and type of the servlet log file is
      * specific to the servlet container.
      *
      *
-     * @param msg 	a <code>String</code> specifying the 
+     * @param msg 	a <code>String</code> specifying the
      *			message to be written to the log file
      *
      */
-     
+
     public void log(String msg);
-    
-    
-    
-    
+
+
+
+
 
     /**
      * @deprecated	As of Java Servlet API 2.1, use
-     * 			{@link #log(String message, Throwable throwable)} 
+     * 			{@link #log(String message, Throwable throwable)}
      *			instead.
      *
-     * <p>This method was originally defined to write an 
+     * <p>This method was originally defined to write an
      * exception's stack trace and an explanatory error message
      * to the servlet log file.
      *
      */
 
     public void log(Exception exception, String msg);
-    
-    
-    
-    
+
+
+
+
 
     /**
      * Writes an explanatory message and a stack trace
      * for a given <code>Throwable</code> exception
-     * to the servlet log file. The name and type of the servlet log 
+     * to the servlet log file. The name and type of the servlet log
      * file is specific to the servlet container, usually an event log.
      *
      *
-     * @param message 		a <code>String</code> that 
+     * @param message 		a <code>String</code> that
      *				describes the error or exception
      *
-     * @param throwable 	the <code>Throwable</code> error 
+     * @param throwable 	the <code>Throwable</code> error
      *				or exception
      *
      */
-    
+
     public void log(String message, Throwable throwable);
-    
-    
-    
-    
-    
+
+
+
+
+
     /**
-     * Returns a <code>String</code> containing the real path 
+     * Returns a <code>String</code> containing the real path
      * for a given virtual path. For example, the path "/index.html"
      * returns the absolute file path on the server's filesystem would be
      * served by a request for "http://host/contextPath/index.html",
@@ -452,61 +452,60 @@
      *
      * @return 		a <code>String</code> specifying the real path,
      *                  or null if the translation cannot be performed
-     *			
+     *
      *
      */
 
     public String getRealPath(String path);
-    
-    
+
+
 
 
     /**
      * Returns the name and version of the servlet container on which
-     * the servlet is running. 
+     * the servlet is running.
      *
-     * <p>The form of the returned string is 
+     * <p>The form of the returned string is
      * <i>servername</i>/<i>versionnumber</i>.
      * For example, the JavaServer Web Development Kit may return the string
      * <code>JavaServer Web Dev Kit/1.0</code>.
      *
-     * <p>The servlet container may return other optional information 
+     * <p>The servlet container may return other optional information
      * after the primary string in parentheses, for example,
      * <code>JavaServer Web Dev Kit/1.0 (JDK 1.1.6; Windows NT 4.0 x86)</code>.
      *
      *
-     * @return 		a <code>String</code> containing at least the 
+     * @return 		a <code>String</code> containing at least the
      *			servlet container name and version number
      *
      */
 
     public String getServerInfo();
-    
-    
+
+
 
 
     /**
      * Returns a <code>String</code> containing the value of the named
-     * context-wide initialization parameter, or <code>null</code> if the 
+     * context-wide initialization parameter, or <code>null</code> if the
      * parameter does not exist.
      *
      * <p>This method can make available configuration information useful
-     * to an entire "web application".  For example, it can provide a 
-     * webmaster's email address or the name of a system that holds 
+     * to an entire "web application".  For example, it can provide a
+     * webmaster's email address or the name of a system that holds
      * critical data.
      *
-     * @param	name	a <code>String</code> containing the name of the
-     *                  parameter whose value is requested
-     * 
-     * @return 		a <code>String</code> containing at least the 
-     *			servlet container name and version number
-     *
+     * @param name
+     *            a <code>String</code> containing the name of the parameter
+     *            whose value is requested
+     * @return a <code>String</code> containing the value of the initialization
+     *         parameter
      * @see ServletConfig#getInitParameter
      */
 
     public String getInitParameter(String name);
-    
-    
+
+
 
 
     /**
@@ -515,7 +514,7 @@
      * empty <code>Enumeration</code> if the context has no initialization
      * parameters.
      *
-     * @return 		an <code>Enumeration</code> of <code>String</code> 
+     * @return 		an <code>Enumeration</code> of <code>String</code>
      *                  objects containing the names of the context's
      *                  initialization parameters
      *
@@ -523,11 +522,11 @@
      */
 
     public Enumeration getInitParameterNames();
-    
-    
+
+
 
     /**
-     * Returns the servlet container attribute with the given name, 
+     * Returns the servlet container attribute with the given name,
      * or <code>null</code> if there is no attribute by that name.
      * An attribute allows a servlet container to give the
      * servlet additional information not
@@ -544,10 +543,10 @@
      * and <code>sun.*</code>.
      *
      *
-     * @param name 	a <code>String</code> specifying the name 
+     * @param name 	a <code>String</code> specifying the name
      *			of the attribute
      *
-     * @return 		an <code>Object</code> containing the value 
+     * @return 		an <code>Object</code> containing the value
      *			of the attribute, or <code>null</code>
      *			if no attribute exists matching the given
      *			name
@@ -555,20 +554,20 @@
      * @see 		ServletContext#getAttributeNames
      *
      */
-  
+
     public Object getAttribute(String name);
-    
-    
-    
+
+
+
 
     /**
-     * Returns an <code>Enumeration</code> containing the 
+     * Returns an <code>Enumeration</code> containing the
      * attribute names available
      * within this servlet context. Use the
      * {@link #getAttribute} method with an attribute name
      * to get the value of an attribute.
      *
-     * @return 		an <code>Enumeration</code> of attribute 
+     * @return 		an <code>Enumeration</code> of attribute
      *			names
      *
      * @see		#getAttribute
@@ -576,28 +575,28 @@
      */
 
     public Enumeration getAttributeNames();
-    
-    
-    
-    
+
+
+
+
     /**
      *
      * Binds an object to a given attribute name in this servlet context. If
      * the name specified is already used for an attribute, this
      * method will replace the attribute with the new to the new attribute.
-     * <p>If listeners are configured on the <code>ServletContext</code> the  
+     * <p>If listeners are configured on the <code>ServletContext</code> the
      * container notifies them accordingly.
      * <p>
-     * If a null value is passed, the effect is the same as calling 
+     * If a null value is passed, the effect is the same as calling
      * <code>removeAttribute()</code>.
-     * 
+     *
      * <p>Attribute names should follow the same convention as package
      * names. The Java Servlet API specification reserves names
      * matching <code>java.*</code>, <code>javax.*</code>, and
      * <code>sun.*</code>.
      *
      *
-     * @param name 	a <code>String</code> specifying the name 
+     * @param name 	a <code>String</code> specifying the name
      *			of the attribute
      *
      * @param object 	an <code>Object</code> representing the
@@ -606,31 +605,31 @@
      *
      *
      */
-    
+
     public void setAttribute(String name, Object object);
-    
-    
+
+
 
 
 
     /**
-     * Removes the attribute with the given name from 
+     * Removes the attribute with the given name from
      * the servlet context. After removal, subsequent calls to
      * {@link #getAttribute} to retrieve the attribute's value
      * will return <code>null</code>.
 
-     * <p>If listeners are configured on the <code>ServletContext</code> the 
+     * <p>If listeners are configured on the <code>ServletContext</code> the
      * container notifies them accordingly.
 
      *
      *
-     * @param name	a <code>String</code> specifying the name 
+     * @param name	a <code>String</code> specifying the name
      * 			of the attribute to be removed
      *
      */
 
     public void removeAttribute(String name);
-    
+
     /**
      * Returns the name of this web application corresponding to this ServletContext as specified in the deployment
      * descriptor for this web application by the display-name element.
@@ -639,7 +638,7 @@
      * @return	    The name of the web application or null if no name has been declared in the deployment descriptor.
      * @since Servlet 2.3
      */
-    
+
     public String getServletContextName();
 }
 
--- java/org/apache/catalina/core/mbeans-descriptors.xml.orig	2015-12-09 16:29:42.315160651 -0500
+++ java/org/apache/catalina/core/mbeans-descriptors.xml	2015-12-09 16:30:14.251014478 -0500
@@ -259,6 +259,10 @@
                description="Flag to set to cause the system.out and system.err to be redirected to the logger when executing a servlet"
                type="boolean"/>
                
+    <attribute name="tldValidation"
+               description="Should the parsing of *.tld files be performed by a validating parser?"
+               type="boolean"/>
+
     <attribute name="unloadDelay"
                description="Amount of ms that the container will wait for servlets to unload"
                type="long"/>
@@ -286,6 +290,14 @@
                description="The pathname to the work directory for this context"
                type="java.lang.String"/>
 
+    <attribute name="xmlValidation"
+               description="Should the parsing of web.xml be performed by a validating parser?"
+               type="boolean"/>
+
+    <attribute name="xmlNamespaceAware"
+               description="Should the parsing of web.xml be performed by a namespace aware parser?"
+               type="boolean"/>
+
     <operation   name="addValve"
                description="Add a valve to this Context"
                impact="ACTION"
@@ -485,11 +497,11 @@
                type="boolean"/>
       
     <attribute name="xmlNamespaceAware"
-               description="Attribute value used to turn on/off XML namespace awareness"
+               description="Controls whether the parsing of the web.xml file for Contexts of this Host will be performed by a namespace aware parser. If false, it may still be enabled per Context using the Context's xmlNamespaceAware attribute."
                type="boolean"/>
       
     <attribute name="xmlValidation"
-               description="Attribute value used to turn on/off XML validation"
+               description="Controls whether the parsing of the web.xml file and *.tld files for Contexts of this Host will be performed by a validating parser. If false, it may still be enabled per Context using the Context's xmlValidation attribute."
                type="boolean"/>
 
     <attribute name="children"
--- java/org/apache/tomcat/util/descriptor/DigesterFactory.java.orig	2015-12-09 16:29:42.316160646 -0500
+++ java/org/apache/tomcat/util/descriptor/DigesterFactory.java	2015-12-09 16:30:10.850030045 -0500
@@ -22,6 +22,7 @@
 import java.util.Map;
 
 import javax.servlet.ServletContext;
+import javax.servlet.jsp.JspContext;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -86,9 +87,9 @@
 
         // from J2EE 1.4
         add(systemIds, "http://www.ibm.com/webservices/xsd/j2ee_web_services_1_1.xsd",
-       locationFor("j2ee_web_services_1_1.xsd"));
+                locationFor("j2ee_web_services_1_1.xsd"));
         add(systemIds, "http://www.ibm.com/webservices/xsd/j2ee_web_services_client_1_1.xsd",
-        locationFor("j2ee_web_services_client_1_1.xsd"));
+                locationFor("j2ee_web_services_client_1_1.xsd"));
         add(systemIds, XmlIdentifiers.WEB_24_XSD, locationFor("web-app_2_4.xsd"));
         add(systemIds, XmlIdentifiers.TLD_20_XSD, locationFor("web-jsptaglibrary_2_0.xsd"));
         addSelf(systemIds, "j2ee_1_4.xsd");
@@ -97,7 +98,10 @@
         // from JavaEE 5
         add(systemIds, XmlIdentifiers.WEB_25_XSD, locationFor("web-app_2_5.xsd"));
         add(systemIds, XmlIdentifiers.TLD_21_XSD, locationFor("web-jsptaglibrary_2_1.xsd"));
+        addSelf(systemIds, "javaee_5.xsd");
         addSelf(systemIds, "jsp_2_1.xsd");
+        addSelf(systemIds, "javaee_web_services_1_2.xsd");
+        addSelf(systemIds, "javaee_web_services_client_1_2.xsd");
 
         SERVLET_API_PUBLIC_IDS = Collections.unmodifiableMap(publicIds);
         SERVLET_API_SYSTEM_IDS = Collections.unmodifiableMap(systemIds);
@@ -123,13 +127,12 @@
             location = CLASS_JSP_CONTEXT.getResource("resources/" + name);
         }
         if (location == null) {
-            log.info(sm.getString("digesterFactory.missingSchema", name));
+            log.warn(sm.getString("digesterFactory.missingSchema", name));
             return null;
         }
         return location.toExternalForm();
     }
 
-
     /**
      * Create a <code>Digester</code> parser.
      * @param xmlValidation turn on/off xml validation
--- java/org/apache/tomcat/util/digester/Digester.java.orig	2015-12-09 16:29:42.317160641 -0500
+++ java/org/apache/tomcat/util/digester/Digester.java	2015-12-09 16:30:14.251014478 -0500
@@ -491,13 +491,35 @@
 
     /**
      * Return the SAXParserFactory we will use, creating one if necessary.
+     * @throws ParserConfigurationException 
+     * @throws SAXNotSupportedException 
+     * @throws SAXNotRecognizedException 
      */
-    public SAXParserFactory getFactory() {
+    public SAXParserFactory getFactory() throws SAXNotRecognizedException,
+            SAXNotSupportedException, ParserConfigurationException {
 
         if (factory == null) {
             factory = SAXParserFactory.newInstance();
+
             factory.setNamespaceAware(namespaceAware);
+            // Preserve xmlns attributes
+            if (namespaceAware) {
+                factory.setFeature(
+                        "http://xml.org/sax/features/namespace-prefixes",
+                        true);
+            }
+
             factory.setValidating(validating);
+            if (validating) {
+                // Enable DTD validation
+                factory.setFeature(
+                        "http://xml.org/sax/features/validation",
+                        true);
+                // Enable schema validation
+                factory.setFeature(
+                        "http://apache.org/xml/features/validation/schema",
+                        true);
+            }
         }
         return (factory);
 
--- java/javax/servlet/resources/javaee_5.xsd.orig	2015-12-09 16:29:42.318160637 -0500
+++ java/javax/servlet/resources/javaee_5.xsd	2015-12-09 16:30:17.830998093 -0500
@@ -0,0 +1,2109 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema
+     targetNamespace="http://java.sun.com/xml/ns/javaee"
+     xmlns:javaee="http://java.sun.com/xml/ns/javaee"
+     xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+     elementFormDefault="qualified"
+     attributeFormDefault="unqualified"
+     version="5">
+  <xsd:annotation>
+    <xsd:documentation>
+      @(#)javaee_5.xsds 1.65 06/02/17
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+
+      DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
+
+      Copyright 2003-2007 Sun Microsystems, Inc. All rights reserved.
+
+      The contents of this file are subject to the terms of either the
+      GNU General Public License Version 2 only ("GPL") or the Common
+      Development and Distribution License("CDDL") (collectively, the
+      "License").  You may not use this file except in compliance with
+      the License. You can obtain a copy of the License at
+      https://glassfish.dev.java.net/public/CDDL+GPL.html or
+      glassfish/bootstrap/legal/LICENSE.txt.  See the License for the
+      specific language governing permissions and limitations under the
+      License.
+
+      When distributing the software, include this License Header
+      Notice in each file and include the License file at
+      glassfish/bootstrap/legal/LICENSE.txt.  Sun designates this
+      particular file as subject to the "Classpath" exception as
+      provided by Sun in the GPL Version 2 section of the License file
+      that accompanied this code.  If applicable, add the following
+      below the License Header, with the fields enclosed by brackets []
+      replaced by your own identifying information:
+      "Portions Copyrighted [year] [name of copyright owner]"
+
+      Contributor(s):
+
+      If you wish your version of this file to be governed by only the
+      CDDL or only the GPL Version 2, indicate your decision by adding
+      "[Contributor] elects to include this software in this
+      distribution under the [CDDL or GPL Version 2] license."  If you
+      don't indicate a single choice of license, a recipient has the
+      option to distribute your version of this file under either the
+      CDDL, the GPL Version 2 or to extend the choice of license to its
+      licensees as provided above.  However, if you add GPL Version 2
+      code and therefore, elected the GPL Version 2 license, then the
+      option applies only if the new code is made subject to such
+      option by the copyright holder.
+
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+      The Apache Software Foundation elects to include this software under the
+      CDDL license.
+    </xsd:documentation>
+  </xsd:annotation>
+
+<xsd:annotation>
+<xsd:documentation>
+
+The following definitions that appear in the common
+shareable schema(s) of J2EE deployment descriptors should be
+interpreted with respect to the context they are included:
+
+Deployment Component may indicate one of the following:
+    j2ee application;
+    application client;
+    web application;
+    enterprise bean;
+    resource adapter;
+
+Deployment File may indicate one of the following:
+    ear file;
+    war file;
+    jar file;
+    rar file;
+
+</xsd:documentation>
+</xsd:annotation>
+
+  <xsd:import namespace="http://www.w3.org/XML/1998/namespace"
+              schemaLocation="http://www.w3.org/2001/xml.xsd"/>
+
+  <xsd:include schemaLocation="javaee_web_services_client_1_2.xsd"/>
+
+
+<!-- **************************************************** -->
+
+  <xsd:group name="descriptionGroup">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This group keeps the usage of the contained description related
+        elements consistent across Java EE deployment descriptors.
+
+        All elements may occur multiple times with different languages,
+        to support localization of the content.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="display-name"
+                   type="javaee:display-nameType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="icon"
+                   type="javaee:iconType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+    </xsd:sequence>
+  </xsd:group>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="descriptionType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The description type is used by a description element to
+        provide text describing the parent element.  The elements
+        that use this type should include any information that the
+        Deployment Component's Deployment File file producer wants
+        to provide to the consumer of the Deployment Component's
+        Deployment File (i.e., to the Deployer). Typically, the
+        tools used by such a Deployment File consumer will display
+        the description when processing the parent element that
+        contains the description.
+
+        The lang attribute defines the language that the
+        description is provided in. The default value is "en" (English).
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="javaee:xsdStringType">
+        <xsd:attribute ref="xml:lang"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="dewey-versionType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type defines a dewey decimal that is used
+        to describe versions of documents.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:restriction base="xsd:token">
+      <xsd:pattern value="\.?[0-9]+(\.[0-9]+)*"/>
+    </xsd:restriction>
+  </xsd:simpleType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="display-nameType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The display-name type contains a short name that is intended
+          to be displayed by tools. It is used by display-name
+          elements.  The display name need not be unique.
+
+          Example:
+
+          ...
+             <display-name xml:lang="en">
+               Employee Self Service
+             </display-name>
+
+          The value of the xml:lang attribute is "en" (English) by default.
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="javaee:string">
+        <xsd:attribute ref="xml:lang"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="ejb-linkType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The ejb-linkType is used by ejb-link
+          elements in the ejb-ref or ejb-local-ref elements to specify
+          that an EJB reference is linked to enterprise bean.
+
+          The value of the ejb-link element must be the ejb-name of an
+          enterprise bean in the same ejb-jar file or in another ejb-jar
+          file in the same Java EE application unit.
+
+          Alternatively, the name in the ejb-link element may be
+          composed of a path name specifying the ejb-jar containing the
+          referenced enterprise bean with the ejb-name of the target
+          bean appended and separated from the path name by "#".  The
+          path name is relative to the Deployment File containing
+          Deployment Component that is referencing the enterprise
+          bean.  This allows multiple enterprise beans with the same
+          ejb-name to be uniquely identified.
+
+          Examples:
+
+              <ejb-link>EmployeeRecord</ejb-link>
+
+              <ejb-link>../products/product.jar#ProductEJB</ejb-link>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="ejb-local-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The ejb-local-refType is used by ejb-local-ref elements for
+        the declaration of a reference to an enterprise bean's local
+        home or to the local business interface of a 3.0 bean.
+        The declaration consists of:
+
+            - an optional description
+            - the EJB reference name used in the code of the Deployment
+              Component that's referencing the enterprise bean.
+            - the optional expected type of the referenced enterprise bean
+            - the optional expected local interface of the referenced
+              enterprise bean or the local business interface of the
+              referenced enterprise bean.
+            - the optional expected local home interface of the referenced
+              enterprise bean. Not applicable if this ejb-local-ref refers
+              to the local business interface of a 3.0 bean.
+            - optional ejb-link information, used to specify the
+              referenced enterprise bean
+            - optional elements to define injection of the named enterprise
+              bean into a component field or property.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="ejb-ref-name"
+                   type="javaee:ejb-ref-nameType"/>
+      <xsd:element name="ejb-ref-type"
+                   type="javaee:ejb-ref-typeType"
+                   minOccurs="0"/>
+      <xsd:element name="local-home"
+                   type="javaee:local-homeType"
+                   minOccurs="0"/>
+      <xsd:element name="local"
+                   type="javaee:localType"
+                   minOccurs="0"/>
+      <xsd:element name="ejb-link"
+                   type="javaee:ejb-linkType"
+                   minOccurs="0"/>
+      <xsd:group ref="javaee:resourceGroup"/>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="ejb-ref-nameType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The ejb-ref-name element contains the name of an EJB
+          reference. The EJB reference is an entry in the
+          Deployment Component's environment and is relative to the
+          java:comp/env context.  The name must be unique within the
+          Deployment Component.
+
+          It is recommended that name is prefixed with "ejb/".
+
+          Example:
+
+          <ejb-ref-name>ejb/Payroll</ejb-ref-name>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:jndi-nameType"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="ejb-ref-typeType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The ejb-ref-typeType contains the expected type of the
+        referenced enterprise bean.
+
+        The ejb-ref-type designates a value
+        that must be one of the following:
+
+            Entity
+            Session
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:enumeration value="Entity"/>
+        <xsd:enumeration value="Session"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="ejb-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The ejb-refType is used by ejb-ref elements for the
+        declaration of a reference to an enterprise bean's home or
+        to the remote business interface of a 3.0 bean.
+        The declaration consists of:
+
+            - an optional description
+            - the EJB reference name used in the code of
+              the Deployment Component that's referencing the enterprise
+              bean.
+            - the optional expected type of the referenced enterprise bean
+            - the optional remote interface of the referenced enterprise bean
+              or the remote business interface of the referenced enterprise
+              bean
+            - the optional expected home interface of the referenced
+              enterprise bean.  Not applicable if this ejb-ref
+              refers to the remote business interface of a 3.0 bean.
+            - optional ejb-link information, used to specify the
+              referenced enterprise bean
+            - optional elements to define injection of the named enterprise
+              bean into a component field or property
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="ejb-ref-name"
+                   type="javaee:ejb-ref-nameType"/>
+      <xsd:element name="ejb-ref-type"
+                   type="javaee:ejb-ref-typeType"
+                   minOccurs="0"/>
+      <xsd:element name="home"
+                   type="javaee:homeType"
+                   minOccurs="0"/>
+      <xsd:element name="remote"
+                   type="javaee:remoteType"
+                   minOccurs="0"/>
+      <xsd:element name="ejb-link"
+                   type="javaee:ejb-linkType"
+                   minOccurs="0"/>
+      <xsd:group ref="javaee:resourceGroup"/>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="emptyType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type is used to designate an empty
+        element when used.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="env-entry-type-valuesType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          This type contains the fully-qualified Java type of the
+          environment entry value that is expected by the
+          application's code.
+
+          The following are the legal values of env-entry-type-valuesType:
+
+              java.lang.Boolean
+              java.lang.Byte
+              java.lang.Character
+              java.lang.String
+              java.lang.Short
+              java.lang.Integer
+              java.lang.Long
+              java.lang.Float
+              java.lang.Double
+
+          Example:
+
+          <env-entry-type>java.lang.Boolean</env-entry-type>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:enumeration value="java.lang.Boolean"/>
+        <xsd:enumeration value="java.lang.Byte"/>
+        <xsd:enumeration value="java.lang.Character"/>
+        <xsd:enumeration value="java.lang.String"/>
+        <xsd:enumeration value="java.lang.Short"/>
+        <xsd:enumeration value="java.lang.Integer"/>
+        <xsd:enumeration value="java.lang.Long"/>
+        <xsd:enumeration value="java.lang.Float"/>
+        <xsd:enumeration value="java.lang.Double"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="env-entryType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The env-entryType is used to declare an application's
+        environment entry. The declaration consists of an optional
+        description, the name of the environment entry, a type
+        (optional if the value is injected, otherwise required), and
+        an optional value.
+
+        It also includes optional elements to define injection of
+        the named resource into fields or JavaBeans properties.
+
+        If a value is not specified and injection is requested,
+        no injection will occur and no entry of the specified name
+        will be created.  This allows an initial value to be
+        specified in the source code without being incorrectly
+        changed when no override has been specified.
+
+        If a value is not specified and no injection is requested,
+        a value must be supplied during deployment.
+
+        This type is used by env-entry elements.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="env-entry-name"
+                   type="javaee:jndi-nameType">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              The env-entry-name element contains the name of a
+              Deployment Component's environment entry.  The name
+              is a JNDI name relative to the java:comp/env
+              context.  The name must be unique within a
+              Deployment Component. The uniqueness
+              constraints must be defined within the declared
+              context.
+
+              Example:
+
+              <env-entry-name>minAmount</env-entry-name>
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="env-entry-type"
+                   type="javaee:env-entry-type-valuesType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              The env-entry-type element contains the Java language
+              type of the environment entry.  If an injection target
+              is specified for the environment entry, the type may
+              be omitted, or must match the type of the injection
+              target.  If no injection target is specified, the type
+              is required.
+
+              Example:
+
+              <env-entry-type>java.lang.Integer</env-entry-type>
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="env-entry-value"
+                   type="javaee:xsdStringType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              The env-entry-value designates the value of a
+              Deployment Component's environment entry. The value
+              must be a String that is valid for the
+              constructor of the specified type that takes a
+              single String parameter, or for java.lang.Character,
+              a single character.
+
+              Example:
+
+              <env-entry-value>100.00</env-entry-value>
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:group ref="javaee:resourceGroup"/>
+
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="fully-qualified-classType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The elements that use this type designate the name of a
+        Java class or interface.  The name is in the form of a
+        "binary name", as defined in the JLS.  This is the form
+        of name used in Class.forName().  Tools that need the
+        canonical name (the name used in source code) will need
+        to convert this binary name to the canonical name.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="generic-booleanType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type defines four different values which can designate
+        boolean values. This includes values yes and no which are
+        not designated by xsd:boolean
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:enumeration value="true"/>
+        <xsd:enumeration value="false"/>
+        <xsd:enumeration value="yes"/>
+        <xsd:enumeration value="no"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="homeType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The homeType defines the fully-qualified name of
+          an enterprise bean's home interface.
+
+          Example:
+
+              <home>com.aardvark.payroll.PayrollHome</home>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:fully-qualified-classType"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="iconType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The icon type contains small-icon and large-icon elements
+        that specify the file names for small and large GIF, JPEG,
+        or PNG icon images used to represent the parent element in a
+        GUI tool.
+
+        The xml:lang attribute defines the language that the
+        icon file names are provided in. Its value is "en" (English)
+        by default.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="small-icon" type="javaee:pathType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              The small-icon element contains the name of a file
+              containing a small (16 x 16) icon image. The file
+              name is a relative path within the Deployment
+              Component's Deployment File.
+
+              The image may be in the GIF, JPEG, or PNG format.
+              The icon can be used by tools.
+
+              Example:
+
+              <small-icon>employee-service-icon16x16.jpg</small-icon>
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="large-icon" type="javaee:pathType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              The large-icon element contains the name of a file
+              containing a large
+              (32 x 32) icon image. The file name is a relative
+              path within the Deployment Component's Deployment
+              File.
+
+              The image may be in the GIF, JPEG, or PNG format.
+              The icon can be used by tools.
+
+              Example:
+
+              <large-icon>employee-service-icon32x32.jpg</large-icon>
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+    </xsd:sequence>
+
+    <xsd:attribute ref="xml:lang"/>
+    <xsd:attribute name="id" type="xsd:ID"/>
+
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="injection-targetType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        An injection target specifies a class and a name within
+        that class into which a resource should be injected.
+
+        The injection target class specifies the fully qualified
+        class name that is the target of the injection.  The
+        Java EE specifications describe which classes can be an
+        injection target.
+
+        The injection target name specifies the target within
+        the specified class.  The target is first looked for as a
+        JavaBeans property name.  If not found, the target is
+        looked for as a field name.
+
+        The specified resource will be injected into the target
+        during initialization of the class by either calling the
+        set method for the target property or by setting a value
+        into the named field.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:element name="injection-target-class"
+                   type="javaee:fully-qualified-classType"/>
+      <xsd:element name="injection-target-name"
+                   type="javaee:java-identifierType"/>
+    </xsd:sequence>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="java-identifierType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The java-identifierType defines a Java identifier.
+        The users of this type should further verify that
+        the content does not contain Java reserved keywords.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:pattern value="($|_|\p{L})(\p{L}|\p{Nd}|_|$)*"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="java-typeType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This is a generic type that designates a Java primitive
+        type or a fully qualified name of a Java interface/type,
+        or an array of such types.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:pattern value="[^\p{Z}]*"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="jndi-nameType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The jndi-nameType type designates a JNDI name in the
+        Deployment Component's environment and is relative to the
+        java:comp/env context.  A JNDI name must be unique within the
+        Deployment Component.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:group name="jndiEnvironmentRefsGroup">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This group keeps the usage of the contained JNDI environment
+        reference elements consistent across Java EE deployment descriptors.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:element name="env-entry"
+                   type="javaee:env-entryType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:element name="ejb-ref"
+                   type="javaee:ejb-refType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:element name="ejb-local-ref"
+                   type="javaee:ejb-local-refType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:group ref="javaee:service-refGroup"/>
+      <xsd:element name="resource-ref"
+                   type="javaee:resource-refType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:element name="resource-env-ref"
+                   type="javaee:resource-env-refType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:element name="message-destination-ref"
+                   type="javaee:message-destination-refType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:element name="persistence-context-ref"
+                   type="javaee:persistence-context-refType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:element name="persistence-unit-ref"
+                   type="javaee:persistence-unit-refType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:element name="post-construct"
+                   type="javaee:lifecycle-callbackType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+      <xsd:element name="pre-destroy"
+                   type="javaee:lifecycle-callbackType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+    </xsd:sequence>
+  </xsd:group>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="lifecycle-callbackType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The lifecycle-callback type specifies a method on a
+        class to be called when a lifecycle event occurs.
+        Note that each class may have only one lifecycle callback
+        method for any given event and that the method may not
+        be overloaded.
+
+        If the lifefycle-callback-class element is missing then
+        the class defining the callback is assumed to be the
+        component class in scope at the place in the descriptor
+        in which the callback definition appears.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:element name="lifecycle-callback-class"
+                   type="javaee:fully-qualified-classType"
+                   minOccurs="0"/>
+      <xsd:element name="lifecycle-callback-method"
+                   type="javaee:java-identifierType"/>
+    </xsd:sequence>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="listenerType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The listenerType indicates the deployment properties for a web
+        application listener bean.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:group ref="javaee:descriptionGroup"/>
+      <xsd:element name="listener-class"
+                   type="javaee:fully-qualified-classType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The listener-class element declares a class in the
+            application must be registered as a web
+            application listener bean. The value is the fully
+            qualified classname of the listener class.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="local-homeType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The local-homeType defines the fully-qualified
+        name of an enterprise bean's local home interface.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:fully-qualified-classType"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="localType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The localType defines the fully-qualified name of an
+        enterprise bean's local interface.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:fully-qualified-classType"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="message-destination-linkType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The message-destination-linkType is used to link a message
+        destination reference or message-driven bean to a message
+        destination.
+
+        The Assembler sets the value to reflect the flow of messages
+        between producers and consumers in the application.
+
+        The value must be the message-destination-name of a message
+        destination in the same Deployment File or in another
+        Deployment File in the same Java EE application unit.
+
+        Alternatively, the value may be composed of a path name
+        specifying a Deployment File containing the referenced
+        message destination with the message-destination-name of the
+        destination appended and separated from the path name by
+        "#". The path name is relative to the Deployment File
+        containing Deployment Component that is referencing the
+        message destination.  This allows multiple message
+        destinations with the same name to be uniquely identified.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="message-destination-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The message-destination-ref element contains a declaration
+          of Deployment Component's reference to a message destination
+          associated with a resource in Deployment Component's
+          environment. It consists of:
+
+                  - an optional description
+                  - the message destination reference name
+                  - an optional message destination type
+                  - an optional specification as to whether
+                    the destination is used for
+                    consuming or producing messages, or both.
+                    if not specified, "both" is assumed.
+                  - an optional link to the message destination
+                  - optional injection targets
+
+          The message destination type must be supplied unless an
+          injection target is specified, in which case the type
+          of the target is used.  If both are specified, the type
+          must be assignment compatible with the type of the injection
+          target.
+
+          Examples:
+
+          <message-destination-ref>
+                  <message-destination-ref-name>jms/StockQueue
+                  </message-destination-ref-name>
+                  <message-destination-type>javax.jms.Queue
+                  </message-destination-type>
+                  <message-destination-usage>Consumes
+                  </message-destination-usage>
+                  <message-destination-link>CorporateStocks
+                  </message-destination-link>
+          </message-destination-ref>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="message-destination-ref-name"
+                   type="javaee:jndi-nameType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The message-destination-ref-name element specifies
+            the name of a message destination reference; its
+            value is the environment entry name used in
+            Deployment Component code.  The name is a JNDI name
+            relative to the java:comp/env context and must be
+            unique within an ejb-jar (for enterprise beans) or a
+            Deployment File (for others).
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="message-destination-type"
+                   type="javaee:message-destination-typeType"
+                   minOccurs="0"/>
+      <xsd:element name="message-destination-usage"
+                   type="javaee:message-destination-usageType"
+                   minOccurs="0"/>
+      <xsd:element name="message-destination-link"
+                   type="javaee:message-destination-linkType"
+                   minOccurs="0"/>
+
+      <xsd:group ref="javaee:resourceGroup"/>
+
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="message-destination-typeType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The message-destination-typeType specifies the type of
+          the destination. The type is specified by the Java interface
+          expected to be implemented by the destination.
+
+          Example:
+
+            <message-destination-type>javax.jms.Queue
+            </message-destination-type>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:fully-qualified-classType"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="message-destination-usageType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The message-destination-usageType specifies the use of the
+        message destination indicated by the reference.  The value
+        indicates whether messages are consumed from the message
+        destination, produced for the destination, or both.  The
+        Assembler makes use of this information in linking producers
+        of a destination with its consumers.
+
+        The value of the message-destination-usage element must be
+        one of the following:
+            Consumes
+            Produces
+            ConsumesProduces
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:enumeration value="Consumes"/>
+        <xsd:enumeration value="Produces"/>
+        <xsd:enumeration value="ConsumesProduces"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="message-destinationType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The message-destinationType specifies a message
+          destination. The logical destination described by this
+          element is mapped to a physical destination by the Deployer.
+
+          The message destination element contains:
+
+                  - an optional description
+                  - an optional display-name
+                  - an optional icon
+                  - a message destination name which must be unique
+                    among message destination names within the same
+                    Deployment File.
+                  - an optional mapped name
+
+          Example:
+
+          <message-destination>
+                  <message-destination-name>CorporateStocks
+                  </message-destination-name>
+          </message-destination>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:group ref="javaee:descriptionGroup"/>
+      <xsd:element name="message-destination-name"
+                   type="javaee:string">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The message-destination-name element specifies a
+            name for a message destination.  This name must be
+            unique among the names of message destinations
+            within the Deployment File.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="mapped-name"
+                   type="javaee:xsdStringType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              A product specific name that this message destination
+              should be mapped to.  Each message-destination-ref
+              element that references this message destination will
+              define a name in the namespace of the referencing
+              component.  (It's a name in the JNDI java:comp/env
+              namespace.)  Many application servers provide a way to
+              map these local names to names of resources known to the
+              application server.  This mapped name is often a global
+              JNDI name, but may be a name of any form.  Each of the
+              local names should be mapped to this same global name.
+
+              Application servers are not required to support any
+              particular form or type of mapped name, nor the ability
+              to use mapped names.  The mapped name is
+              product-dependent and often installation-dependent.  No
+              use of a mapped name is portable.
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="param-valueType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type is a general type that can be used to declare
+        parameter/value lists.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="param-name"
+                   type="javaee:string">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The param-name element contains the name of a
+            parameter.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="param-value"
+                   type="javaee:xsdStringType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The param-value element contains the value of a
+            parameter.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="pathType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The elements that use this type designate either a relative
+        path or an absolute path starting with a "/".
+
+        In elements that specify a pathname to a file within the
+        same Deployment File, relative filenames (i.e., those not
+        starting with "/") are considered relative to the root of
+        the Deployment File's namespace.  Absolute filenames (i.e.,
+        those starting with "/") also specify names in the root of
+        the Deployment File's namespace.  In general, relative names
+        are preferred.  The exception is .war files where absolute
+        names are preferred for consistency with the Servlet API.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="persistence-context-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The persistence-context-ref element contains a declaration
+          of Deployment Component's reference to a persistence context
+          associated within a Deployment Component's
+          environment. It consists of:
+
+                  - an optional description
+                  - the persistence context reference name
+                  - an optional persistence unit name.  If not specified,
+                    the default persistence unit is assumed.
+                  - an optional specification as to whether
+                    the persistence context type is Transaction or
+                    Extended.  If not specified, Transaction is assumed.
+                  - an optional list of persistence properties
+                  - optional injection targets
+
+          Examples:
+
+            <persistence-context-ref>
+              <persistence-context-ref-name>myPersistenceContext
+              </persistence-context-ref-name>
+            </persistence-context-ref>
+
+            <persistence-context-ref>
+              <persistence-context-ref-name>myPersistenceContext
+                </persistence-context-ref-name>
+              <persistence-unit-name>PersistenceUnit1
+                </persistence-unit-name>
+              <persistence-context-type>Extended</persistence-context-type>
+            </persistence-context-ref>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="persistence-context-ref-name"
+                   type="javaee:jndi-nameType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The persistence-context-ref-name element specifies
+            the name of a persistence context reference; its
+            value is the environment entry name used in
+            Deployment Component code.  The name is a JNDI name
+            relative to the java:comp/env context.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="persistence-unit-name"
+                   type="javaee:string"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The Application Assembler(or BeanProvider) may use the
+            following syntax to avoid the need to rename persistence
+            units to have unique names within a Java EE application.
+
+            The Application Assembler specifies the pathname of the
+            root of the persistence.xml file for the referenced
+            persistence unit and appends the name of the persistence
+            unit separated from the pathname by #. The pathname is
+            relative to the referencing application component jar file.
+            In this manner, multiple persistence units with the same
+            persistence unit name may be uniquely identified when the
+            Application Assembler cannot change persistence unit names.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="persistence-context-type"
+                   type="javaee:persistence-context-typeType"
+                   minOccurs="0"/>
+
+      <xsd:element name="persistence-property"
+                   type="javaee:propertyType"
+                   minOccurs="0"
+                   maxOccurs="unbounded">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Used to specify properties for the container or persistence
+            provider.  Vendor-specific properties may be included in
+            the set of properties.  Properties that are not recognized
+            by a vendor must be ignored.  Entries that make use of the
+            namespace javax.persistence and its subnamespaces must not
+            be used for vendor-specific properties.  The namespace
+            javax.persistence is reserved for use by the specification.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:group ref="javaee:resourceGroup"/>
+
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="persistence-context-typeType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The persistence-context-typeType specifies the transactional
+        nature of a persistence context reference.
+
+        The value of the persistence-context-type element must be
+        one of the following:
+            Transaction
+            Extended
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:enumeration value="Transaction"/>
+        <xsd:enumeration value="Extended"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="persistence-unit-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The persistence-unit-ref element contains a declaration
+          of Deployment Component's reference to a persistence unit
+          associated within a Deployment Component's
+          environment. It consists of:
+
+                  - an optional description
+                  - the persistence unit reference name
+                  - an optional persistence unit name.  If not specified,
+                    the default persistence unit is assumed.
+                  - optional injection targets
+
+          Examples:
+
+            <persistence-unit-ref>
+              <persistence-unit-ref-name>myPersistenceUnit
+              </persistence-unit-ref-name>
+            </persistence-unit-ref>
+
+            <persistence-unit-ref>
+              <persistence-unit-ref-name>myPersistenceUnit
+                </persistence-unit-ref-name>
+              <persistence-unit-name>PersistenceUnit1
+                </persistence-unit-name>
+            </persistence-unit-ref>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="persistence-unit-ref-name"
+                   type="javaee:jndi-nameType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The persistence-unit-ref-name element specifies
+            the name of a persistence unit reference; its
+            value is the environment entry name used in
+            Deployment Component code.  The name is a JNDI name
+            relative to the java:comp/env context.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="persistence-unit-name"
+                   type="javaee:string"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The Application Assembler(or BeanProvider) may use the
+            following syntax to avoid the need to rename persistence
+            units to have unique names within a Java EE application.
+
+            The Application Assembler specifies the pathname of the
+            root of the persistence.xml file for the referenced
+            persistence unit and appends the name of the persistence
+            unit separated from the pathname by #. The pathname is
+            relative to the referencing application component jar file.
+            In this manner, multiple persistence units with the same
+            persistence unit name may be uniquely identified when the
+            Application Assembler cannot change persistence unit names.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:group ref="javaee:resourceGroup"/>
+
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="propertyType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        Specifies a name/value pair.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="name"
+                   type="javaee:xsdStringType">
+      </xsd:element>
+      <xsd:element name="value"
+                   type="javaee:xsdStringType">
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="remoteType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The remote element contains the fully-qualified name
+          of the enterprise bean's remote interface.
+
+          Example:
+
+              <remote>com.wombat.empl.EmployeeService</remote>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:fully-qualified-classType"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="res-authType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The res-authType specifies whether the Deployment Component
+        code signs on programmatically to the resource manager, or
+        whether the Container will sign on to the resource manager
+        on behalf of the Deployment Component. In the latter case,
+        the Container uses information that is supplied by the
+        Deployer.
+
+        The value must be one of the two following:
+
+            Application
+            Container
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:enumeration value="Application"/>
+        <xsd:enumeration value="Container"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="res-sharing-scopeType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The res-sharing-scope type specifies whether connections
+        obtained through the given resource manager connection
+        factory reference can be shared. The value, if specified,
+        must be one of the two following:
+
+            Shareable
+            Unshareable
+
+        The default value is Shareable.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string">
+        <xsd:enumeration value="Shareable"/>
+        <xsd:enumeration value="Unshareable"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="resource-env-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The resource-env-refType is used to define
+          resource-env-type elements.  It contains a declaration of a
+          Deployment Component's reference to an administered object
+          associated with a resource in the Deployment Component's
+          environment.  It consists of an optional description, the
+          resource environment reference name, and an optional
+          indication of the resource environment reference type
+          expected by the Deployment Component code.
+
+          It also includes optional elements to define injection of
+          the named resource into fields or JavaBeans properties.
+
+          The resource environment type must be supplied unless an
+          injection target is specified, in which case the type
+          of the target is used.  If both are specified, the type
+          must be assignment compatible with the type of the injection
+          target.
+
+          Example:
+
+          <resource-env-ref>
+              <resource-env-ref-name>jms/StockQueue
+              </resource-env-ref-name>
+              <resource-env-ref-type>javax.jms.Queue
+              </resource-env-ref-type>
+          </resource-env-ref>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="resource-env-ref-name"
+                   type="javaee:jndi-nameType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The resource-env-ref-name element specifies the name
+            of a resource environment reference; its value is
+            the environment entry name used in
+            the Deployment Component code.  The name is a JNDI
+            name relative to the java:comp/env context and must
+            be unique within a Deployment Component.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="resource-env-ref-type"
+                   type="javaee:fully-qualified-classType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The resource-env-ref-type element specifies the type
+            of a resource environment reference.  It is the
+            fully qualified name of a Java language class or
+            interface.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:group ref="javaee:resourceGroup"/>
+
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="resource-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The resource-refType contains a declaration of a
+          Deployment Component's reference to an external resource. It
+          consists of an optional description, the resource manager
+          connection factory reference name, an optional indication of
+          the resource manager connection factory type expected by the
+          Deployment Component code, an optional type of authentication
+          (Application or Container), and an optional specification of
+          the shareability of connections obtained from the resource
+          (Shareable or Unshareable).
+
+          It also includes optional elements to define injection of
+          the named resource into fields or JavaBeans properties.
+
+          The connection factory type must be supplied unless an
+          injection target is specified, in which case the type
+          of the target is used.  If both are specified, the type
+          must be assignment compatible with the type of the injection
+          target.
+
+          Example:
+
+          <resource-ref>
+              <res-ref-name>jdbc/EmployeeAppDB</res-ref-name>
+              <res-type>javax.sql.DataSource</res-type>
+              <res-auth>Container</res-auth>
+              <res-sharing-scope>Shareable</res-sharing-scope>
+          </resource-ref>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="res-ref-name"
+                   type="javaee:jndi-nameType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The res-ref-name element specifies the name of a
+            resource manager connection factory reference.
+            The name is a JNDI name relative to the
+            java:comp/env context.
+            The name must be unique within a Deployment File.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="res-type"
+                   type="javaee:fully-qualified-classType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The res-type element specifies the type of the data
+            source. The type is specified by the fully qualified
+            Java language class or interface
+            expected to be implemented by the data source.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="res-auth"
+                   type="javaee:res-authType"
+                   minOccurs="0"/>
+
+      <xsd:element name="res-sharing-scope"
+                   type="javaee:res-sharing-scopeType"
+                   minOccurs="0"/>
+
+      <xsd:group ref="javaee:resourceGroup"/>
+
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:group name="resourceGroup">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This group collects elements that are common to all the
+        JNDI resource elements.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:element name="mapped-name"
+                   type="javaee:xsdStringType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              A product specific name that this resource should be
+              mapped to.  The name of this resource, as defined by the
+              resource's name element or defaulted, is a name that is
+              local to the application component using the resource.
+              (It's a name in the JNDI java:comp/env namespace.)  Many
+              application servers provide a way to map these local
+              names to names of resources known to the application
+              server.  This mapped name is often a global JNDI name,
+              but may be a name of any form.
+
+              Application servers are not required to support any
+              particular form or type of mapped name, nor the ability
+              to use mapped names.  The mapped name is
+              product-dependent and often installation-dependent.  No
+              use of a mapped name is portable.
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="injection-target"
+                   type="javaee:injection-targetType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+    </xsd:sequence>
+  </xsd:group>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="role-nameType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The role-nameType designates the name of a security role.
+
+        The name must conform to the lexical rules for a token.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="run-asType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The run-asType specifies the run-as identity to be
+        used for the execution of a component. It contains an
+        optional description, and the name of a security role.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="role-name"
+                   type="javaee:role-nameType"/>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="security-role-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The security-role-refType contains the declaration of a
+        security role reference in a component's or a
+        Deployment Component's code. The declaration consists of an
+        optional description, the security role name used in the
+        code, and an optional link to a security role. If the
+        security role is not specified, the Deployer must choose an
+        appropriate security role.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="role-name"
+                   type="javaee:role-nameType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The value of the role-name element must be the String used
+            as the parameter to the
+            EJBContext.isCallerInRole(String roleName) method or the
+            HttpServletRequest.isUserInRole(String role) method.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="role-link"
+                   type="javaee:role-nameType"
+                   minOccurs="0">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The role-link element is a reference to a defined
+            security role. The role-link element must contain
+            the name of one of the security roles defined in the
+            security-role elements.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="security-roleType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The security-roleType contains the definition of a security
+          role. The definition consists of an optional description of
+          the security role, and the security role name.
+
+          Example:
+
+              <security-role>
+              <description>
+                  This role includes all employees who are authorized
+                  to access the employee service application.
+              </description>
+              <role-name>employee</role-name>
+              </security-role>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0"
+                   maxOccurs="unbounded"/>
+      <xsd:element name="role-name"
+                   type="javaee:role-nameType"/>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="string">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This is a special string datatype that is defined by Java EE as
+        a base type for defining collapsed strings. When schemas
+        require trailing/leading space elimination as well as
+        collapsing the existing whitespace, this base type may be
+        used.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:token">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="true-falseType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This simple type designates a boolean with only two
+        permissible values
+
+        - true
+        - false
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:xsdBooleanType">
+        <xsd:pattern value="(true|false)"/>
+      </xsd:restriction>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="url-patternType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The url-patternType contains the url pattern of the mapping.
+        It must follow the rules specified in Section 11.2 of the
+        Servlet API Specification. This pattern is assumed to be in
+        URL-decoded form and must not contain CR(#xD) or LF(#xA).
+        If it contains those characters, the container must inform
+        the developer with a descriptive error message.
+        The container must preserve all characters including whitespaces.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:string"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="xsdAnyURIType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type adds an "id" attribute to xsd:anyURI.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:anyURI">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="xsdBooleanType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type adds an "id" attribute to xsd:boolean.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:boolean">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="xsdIntegerType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type adds an "id" attribute to xsd:integer.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:integer">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="xsdNMTOKENType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type adds an "id" attribute to xsd:NMTOKEN.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:NMTOKEN">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="xsdNonNegativeIntegerType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type adds an "id" attribute to xsd:nonNegativeInteger.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:nonNegativeInteger">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="xsdPositiveIntegerType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type adds an "id" attribute to xsd:positiveInteger.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:positiveInteger">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="xsdQNameType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type adds an "id" attribute to xsd:QName.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:QName">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="xsdStringType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        This type adds an "id" attribute to xsd:string.
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:extension base="xsd:string">
+        <xsd:attribute name="id" type="xsd:ID"/>
+      </xsd:extension>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+</xsd:schema>
+
--- java/javax/servlet/resources/javaee_web_services_1_2.xsd.orig	2015-12-09 16:29:42.320160628 -0500
+++ java/javax/servlet/resources/javaee_web_services_1_2.xsd	2015-12-09 16:30:17.831998088 -0500
@@ -0,0 +1,761 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema"
+            targetNamespace="http://java.sun.com/xml/ns/javaee"
+            xmlns:javaee="http://java.sun.com/xml/ns/javaee"
+            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+            elementFormDefault="qualified"
+            attributeFormDefault="unqualified"
+            version="1.2">
+  <xsd:annotation>
+    <xsd:documentation>
+      @(#)javaee_web_services_1_2.xsds 1.18 02/13/06
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+
+      DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
+
+      Copyright 2003-2007 Sun Microsystems, Inc. All rights reserved.
+
+      The contents of this file are subject to the terms of either the
+      GNU General Public License Version 2 only ("GPL") or the Common
+      Development and Distribution License("CDDL") (collectively, the
+      "License").  You may not use this file except in compliance with
+      the License. You can obtain a copy of the License at
+      https://glassfish.dev.java.net/public/CDDL+GPL.html or
+      glassfish/bootstrap/legal/LICENSE.txt.  See the License for the
+      specific language governing permissions and limitations under the
+      License.
+
+      When distributing the software, include this License Header
+      Notice in each file and include the License file at
+      glassfish/bootstrap/legal/LICENSE.txt.  Sun designates this
+      particular file as subject to the "Classpath" exception as
+      provided by Sun in the GPL Version 2 section of the License file
+      that accompanied this code.  If applicable, add the following
+      below the License Header, with the fields enclosed by brackets []
+      replaced by your own identifying information:
+      "Portions Copyrighted [year] [name of copyright owner]"
+
+      Contributor(s):
+
+      If you wish your version of this file to be governed by only the
+      CDDL or only the GPL Version 2, indicate your decision by adding
+      "[Contributor] elects to include this software in this
+      distribution under the [CDDL or GPL Version 2] license."  If you
+      don't indicate a single choice of license, a recipient has the
+      option to distribute your version of this file under either the
+      CDDL, the GPL Version 2 or to extend the choice of license to its
+      licensees as provided above.  However, if you add GPL Version 2
+      code and therefore, elected the GPL Version 2 license, then the
+      option applies only if the new code is made subject to such
+      option by the copyright holder.
+
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+      The Apache Software Foundation elects to include this software under the
+      CDDL license.
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+
+      (C) Copyright International Business Machines Corporation 2002
+
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+      <![CDATA[
+
+        The webservices element is the root element for the web services
+        deployment descriptor.  It specifies the set of web service
+        descriptions that are to be deployed into the Java EE Application
+        Server and the dependencies they have on container resources and
+        services.  The deployment descriptor must be named
+        "META-INF/webservices.xml" in the web services' jar file.
+
+        Used in: webservices.xml
+
+        All webservices deployment descriptors must indicate the
+        webservices schema by using the Java EE namespace:
+
+        http://java.sun.com/xml/ns/javaee
+
+        and by indicating the version of the schema by using the version
+        element as shown below:
+
+            <webservices xmlns="http://java.sun.com/xml/ns/javaee"
+              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
+                http://java.sun.com/xml/ns/javaee/javaee_web_services_1_2.xsd"
+              version="1.2">
+              ...
+            </webservices>
+
+        The instance documents may indicate the published version of the
+        schema using the xsi:schemaLocation attribute for the Java EE
+        namespace with the following location:
+
+        http://java.sun.com/xml/ns/javaee/javaee_web_services_1_2.xsd
+
+        ]]>
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+
+      The following conventions apply to all Java EE
+      deployment descriptor elements unless indicated otherwise.
+
+      - In elements that specify a pathname to a file within the
+        same JAR file, relative filenames (i.e., those not
+        starting with "/") are considered relative to the root of
+        the JAR file's namespace.  Absolute filenames (i.e., those
+        starting with "/") also specify names in the root of the
+        JAR file's namespace.  In general, relative names are
+        preferred.  The exception is .war files where absolute
+        names are preferred for consistency with the Servlet API.
+
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:include schemaLocation="javaee_5.xsd"/>
+
+
+<!-- **************************************************** -->
+
+  <xsd:element name="webservices" type="javaee:webservicesType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The webservices element is the root element for the web services
+        deployment descriptor.  It specifies the set of web service
+        descriptions that are to be deployed into the Java EE Application Server
+        and the dependencies they have on container resources and services.
+
+        Used in: webservices.xml
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:key name="webservice-description-name-key">
+      <xsd:annotation>
+        <xsd:documentation>
+
+          The webservice-description-name identifies the collection of
+          port-components associated with a WSDL file and JAX-RPC mapping. The
+          name must be unique within the deployment descriptor.
+
+        </xsd:documentation>
+      </xsd:annotation>
+      <xsd:selector xpath="javaee:webservice-description"/>
+      <xsd:field xpath="javaee:webservice-description-name"/>
+    </xsd:key>
+  </xsd:element>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="handler-chainType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+      The handler-chain element defines the handlerchain.
+      Handlerchain can be defined such that the handlers in the
+      handlerchain operate,all ports of a service, on a specific
+      port or on a list of protocol-bindings. The choice of elements
+      service-name-pattern, port-name-pattern and protocol-bindings
+      are used to specify whether the handlers in handler-chain are
+      for a service, port or protocol binding. If none of these
+      choices are specified with the handler-chain element then the
+      handlers specified in the handler-chain will be applied on
+      everything.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+
+      <xsd:choice minOccurs="0" maxOccurs="1">
+         <xsd:element name="service-name-pattern"
+                      type="javaee:qname-pattern" />
+         <xsd:element name="port-name-pattern"
+                      type="javaee:qname-pattern" />
+         <xsd:element name="protocol-bindings"
+                      type="javaee:protocol-bindingListType"/>
+      </xsd:choice>
+
+      <xsd:element name="handler"
+                   type="javaee:port-component_handlerType"
+                   minOccurs="1" maxOccurs="unbounded"/>
+    </xsd:sequence>
+
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="handler-chainsType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+      The handler-chains element defines the handlerchains associated
+      with this service or service endpoint.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="handler-chain"
+                   type="javaee:handler-chainType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+    </xsd:sequence>
+
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="port-componentType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The port-component element associates a WSDL port with a web service
+        interface and implementation.  It defines the name of the port as a
+        component, optional description, optional display name, optional iconic
+        representations, WSDL port QName, Service Endpoint Interface, Service
+        Implementation Bean.
+
+        This element also associates a WSDL service with a JAX-WS Provider
+        implementation.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0" maxOccurs="1"/>
+      <xsd:element name="display-name"
+                   type="javaee:display-nameType"
+                   minOccurs="0" maxOccurs="1"/>
+      <xsd:element name="icon"
+                   type="javaee:iconType"
+                   minOccurs="0" maxOccurs="1"/>
+      <xsd:element name="port-component-name"
+                   type="javaee:string">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              The port-component-name element specifies a port component's
+              name.  This name is assigned by the module producer to name
+              the service implementation bean in the module's deployment
+              descriptor. The name must be unique among the port component
+              names defined in the same module.
+
+              Used in: port-component
+
+              Example:
+                      <port-component-name>EmployeeService
+                      </port-component-name>
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="wsdl-service"
+                   type="javaee:xsdQNameType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Defines the name space and local name part of the WSDL
+            service QName. This is required to be specified for
+            port components that are JAX-WS Provider implementations.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="wsdl-port"
+                   type="javaee:xsdQNameType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Defines the name space and local name part of the WSDL
+            port QName. This is not required to be specified for port
+            components that are JAX-WS Provider implementations
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="enable-mtom"
+                   type="javaee:true-falseType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Used to enable or disable SOAP MTOM/XOP mechanism for an
+            endpoint implementation.
+
+            Not to be specified for JAX-RPC runtime
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="protocol-binding"
+                   type="javaee:protocol-bindingType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Used to specify the protocol binding used by the port-component.
+            If this element is not specified, then the default binding is
+            used (SOAP 1.1 over HTTP)
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="service-endpoint-interface"
+                   type="javaee:fully-qualified-classType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+            <![CDATA[
+
+              The service-endpoint-interface element contains the
+              fully-qualified name of the port component's Service Endpoint
+              Interface.
+
+              Used in: port-component
+
+              Example:
+                      <remote>com.wombat.empl.EmployeeService</remote>
+
+              This may not be specified in case there is no Service
+              Enpoint Interface as is the case with directly using an
+              implementation class with the @WebService annotation.
+
+              When the port component is a Provider implementation
+              this is not specified.
+
+              ]]>
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="service-impl-bean"
+                   type="javaee:service-impl-beanType"/>
+
+      <xsd:choice>
+        <xsd:element name="handler"
+                     type="javaee:port-component_handlerType"
+                     minOccurs="0" maxOccurs="unbounded">
+          <xsd:annotation>
+            <xsd:documentation>
+                 To be used with JAX-RPC based runtime only.
+            </xsd:documentation>
+          </xsd:annotation>
+        </xsd:element>
+        <xsd:element name="handler-chains"
+                     type="javaee:handler-chainsType"
+                     minOccurs="0" maxOccurs="1">
+          <xsd:annotation>
+            <xsd:documentation>
+                 To be used with JAX-WS based runtime only.
+            </xsd:documentation>
+          </xsd:annotation>
+        </xsd:element>
+      </xsd:choice>
+
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="port-component_handlerType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        Declares the handler for a port-component. Handlers can access the
+        init-param name/value pairs using the HandlerInfo interface.
+
+        Used in: port-component
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:group ref="javaee:descriptionGroup"/>
+      <xsd:element name="handler-name"
+                   type="javaee:string">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Defines the name of the handler. The name must be unique within the
+            module.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="handler-class"
+                   type="javaee:fully-qualified-classType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Defines a fully qualified class name for the handler implementation.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="init-param"
+                   type="javaee:param-valueType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+
+      <xsd:element name="soap-header"
+                   type="javaee:xsdQNameType"
+                   minOccurs="0" maxOccurs="unbounded">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Defines the QName of a SOAP header that will be processed by the
+            handler.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="soap-role"
+                   type="javaee:string"
+                   minOccurs="0" maxOccurs="unbounded">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The soap-role element contains a SOAP actor definition that the
+            Handler will play as a role.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="protocol-URIAliasType">
+     <xsd:annotation>
+        <xsd:documentation>
+           Defines the type that is used for specifying tokens that
+           start with ## which are used to alias existing standard
+           protocol bindings and support aliases for new standard
+           binding URIs that are introduced in future specifications.
+
+           The following tokens alias the standard protocol binding
+           URIs:
+
+           ##SOAP11_HTTP = "http://schemas.xmlsoap.org/wsdl/soap/http"
+           ##SOAP11_HTTP_MTOM =
+                 "http://schemas.xmlsoap.org/wsdl/soap/http?mtom=true"
+           ##SOAP12_HTTP = "http://www.w3.org/2003/05/soap/bindings/HTTP/"
+           ##SOAP12_HTTP_MTOM =
+                 "http://www.w3.org/2003/05/soap/bindings/HTTP/?mtom=true"
+           ##XML_HTTP = "http://www.w3.org/2004/08/wsdl/http"
+
+        </xsd:documentation>
+     </xsd:annotation>
+     <xsd:restriction base="xsd:token">
+        <xsd:pattern value="##.+"/>
+     </xsd:restriction>
+  </xsd:simpleType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="protocol-bindingListType">
+     <xsd:annotation>
+        <xsd:documentation>
+           Defines the type used for specifying a list of
+           protocol-bindingType(s). For e.g.
+
+            ##SOAP11_HTTP ##SOAP12_HTTP ##XML_HTTP
+
+        </xsd:documentation>
+     </xsd:annotation>
+     <xsd:list itemType="javaee:protocol-bindingType"/>
+  </xsd:simpleType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="protocol-bindingType">
+     <xsd:annotation>
+        <xsd:documentation>
+           Defines the type used for specifying the URI for the
+           protocol binding used by the port-component.  For
+           portability one could use one of the following tokens that
+           alias the standard binding types:
+
+            ##SOAP11_HTTP
+            ##SOAP11_HTTP_MTOM
+            ##SOAP12_HTTP
+            ##SOAP12_HTTP_MTOM
+            ##XML_HTTP
+
+           Other specifications could define tokens that start with ##
+           to alias new standard binding URIs that are introduced.
+
+        </xsd:documentation>
+     </xsd:annotation>
+     <xsd:union memberTypes="xsd:anyURI javaee:protocol-URIAliasType"/>
+  </xsd:simpleType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="qname-pattern">
+     <xsd:annotation>
+        <xsd:documentation>
+             This is used to specify the QName pattern in the
+             attribute service-name-pattern and port-name-pattern in
+             the handler-chain element
+
+             For example, the various forms acceptable here for
+             service-name-pattern attribute in handler-chain element
+             are :
+
+             Exact Name: service-name-pattern="ns1:EchoService"
+
+                 In this case, handlers specified in this
+                 handler-chain element will apply to all ports with
+                 this exact service name. The namespace prefix must
+                 have been declared in a namespace declaration
+                 attribute in either the start-tag of the element
+                 where the prefix is used or in an an ancestor
+                 element (i.e. an element in whose content the
+                 prefixed markup occurs)
+
+             Pattern : service-name-pattern="ns1:EchoService*"
+
+                 In this case, handlers specified in this
+                 handler-chain element will apply to all ports whose
+                 Service names are like EchoService1, EchoServiceFoo
+                 etc. The namespace prefix must have been declared in
+                 a namespace declaration attribute in either the
+                 start-tag of the element where the prefix is used or
+                 in an an ancestor element (i.e. an element in whose
+                 content the prefixed markup occurs)
+
+             Wild Card : service-name-pattern="*"
+
+                In this case, handlers specified in this handler-chain
+                element will apply to ports of all service names.
+
+            The same can be applied to port-name attribute in
+            handler-chain element.
+
+        </xsd:documentation>
+     </xsd:annotation>
+
+     <xsd:restriction base="xsd:token">
+        <xsd:pattern value="\*|([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*\*?"/>
+     </xsd:restriction>
+
+  </xsd:simpleType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="service-impl-beanType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The service-impl-bean element defines the web service implementation.
+        A service implementation can be an EJB bean class or JAX-RPC web
+        component.  Existing EJB implementations are exposed as a web service
+        using an ejb-link.
+
+        Used in: port-component
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:choice>
+      <xsd:element name="ejb-link"
+                   type="javaee:ejb-linkType"/>
+      <xsd:element name="servlet-link"
+                   type="javaee:servlet-linkType"/>
+    </xsd:choice>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="servlet-linkType">
+    <xsd:annotation>
+      <xsd:documentation>
+        <![CDATA[
+
+          The servlet-link element is used in the service-impl-bean element
+          to specify that a Service Implementation Bean is defined as a
+          JAX-RPC Service Endpoint.
+
+          The value of the servlet-link element must be the servlet-name of
+          a JAX-RPC Service Endpoint in the same WAR file.
+
+          Used in: service-impl-bean
+
+          Example:
+                  <servlet-link>StockQuoteService</servlet-link>
+
+          ]]>
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:simpleContent>
+      <xsd:restriction base="javaee:string"/>
+    </xsd:simpleContent>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="webservice-descriptionType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The webservice-description element defines a WSDL document file
+        and the set of Port components associated with the WSDL ports
+        defined in the WSDL document.  There may be multiple
+        webservice-descriptions defined within a module.
+
+        All WSDL file ports must have a corresponding port-component element
+        defined.
+
+        Used in: webservices
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="description"
+                   type="javaee:descriptionType"
+                   minOccurs="0" maxOccurs="1"/>
+      <xsd:element name="display-name"
+                   type="javaee:display-nameType"
+                   minOccurs="0" maxOccurs="1"/>
+      <xsd:element name="icon"
+                   type="javaee:iconType"
+                   minOccurs="0" maxOccurs="1"/>
+      <xsd:element name="webservice-description-name"
+                   type="javaee:string">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The webservice-description-name identifies the collection of
+            port-components associated with a WSDL file and JAX-RPC
+            mapping. The name must be unique within the deployment descriptor.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="wsdl-file"
+                   type="javaee:pathType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The wsdl-file element contains the name of a WSDL file in the
+            module.  The file name is a relative path within the module.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="jaxrpc-mapping-file"
+                   type="javaee:pathType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The jaxrpc-mapping-file element contains the name of a file that
+            describes the JAX-RPC mapping between the Java interaces used by
+            the application and the WSDL description in the wsdl-file.  The
+            file name is a relative path within the module.
+
+            This is not required when JAX-WS based runtime is used.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="port-component"
+                   type="javaee:port-componentType"
+                   minOccurs="1" maxOccurs="unbounded">
+        <xsd:key name="port-component_handler-name-key">
+          <xsd:annotation>
+            <xsd:documentation>
+
+              Defines the name of the handler. The name must be unique
+              within the module.
+
+            </xsd:documentation>
+          </xsd:annotation>
+          <xsd:selector xpath="javaee:handler"/>
+          <xsd:field xpath="javaee:handler-name"/>
+        </xsd:key>
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="webservicesType">
+    <xsd:sequence>
+      <xsd:group ref="javaee:descriptionGroup"/>
+      <xsd:element name="webservice-description"
+                   type="javaee:webservice-descriptionType"
+                   minOccurs="1" maxOccurs="unbounded">
+        <xsd:key name="port-component-name-key">
+          <xsd:annotation>
+            <xsd:documentation>
+              <![CDATA[
+
+                The port-component-name element specifies a port
+                component's name.  This name is assigned by the module
+                producer to name the service implementation bean in the
+                module's deployment descriptor. The name must be unique
+                among the port component names defined in the same module.
+
+                Used in: port-component
+
+                Example:
+                        <port-component-name>EmployeeService
+                        </port-component-name>
+
+                ]]>
+            </xsd:documentation>
+          </xsd:annotation>
+          <xsd:selector xpath="javaee:port-component"/>
+          <xsd:field xpath="javaee:port-component-name"/>
+        </xsd:key>
+      </xsd:element>
+    </xsd:sequence>
+
+    <xsd:attribute name="version"
+                   type="javaee:dewey-versionType"
+                   fixed="1.2"
+                   use="required">
+      <xsd:annotation>
+        <xsd:documentation>
+
+          The required value for the version is 1.2.
+
+        </xsd:documentation>
+      </xsd:annotation>
+    </xsd:attribute>
+
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+</xsd:schema>
+
--- java/javax/servlet/resources/javaee_web_services_client_1_2.xsd.orig	2015-12-09 16:29:42.321160623 -0500
+++ java/javax/servlet/resources/javaee_web_services_client_1_2.xsd	2015-12-09 16:30:17.832998084 -0500
@@ -0,0 +1,592 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema"
+            targetNamespace="http://java.sun.com/xml/ns/javaee"
+            xmlns:javaee="http://java.sun.com/xml/ns/javaee"
+            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+            elementFormDefault="qualified"
+            attributeFormDefault="unqualified"
+            version="1.2">
+  <xsd:annotation>
+    <xsd:documentation>
+      @(#)javaee_web_services_client_1_2.xsds 1.19 02/13/06
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+
+      DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
+
+      Copyright 2003-2007 Sun Microsystems, Inc. All rights reserved.
+
+      The contents of this file are subject to the terms of either the
+      GNU General Public License Version 2 only ("GPL") or the Common
+      Development and Distribution License("CDDL") (collectively, the
+      "License").  You may not use this file except in compliance with
+      the License. You can obtain a copy of the License at
+      https://glassfish.dev.java.net/public/CDDL+GPL.html or
+      glassfish/bootstrap/legal/LICENSE.txt.  See the License for the
+      specific language governing permissions and limitations under the
+      License.
+
+      When distributing the software, include this License Header
+      Notice in each file and include the License file at
+      glassfish/bootstrap/legal/LICENSE.txt.  Sun designates this
+      particular file as subject to the "Classpath" exception as
+      provided by Sun in the GPL Version 2 section of the License file
+      that accompanied this code.  If applicable, add the following
+      below the License Header, with the fields enclosed by brackets []
+      replaced by your own identifying information:
+      "Portions Copyrighted [year] [name of copyright owner]"
+
+      Contributor(s):
+
+      If you wish your version of this file to be governed by only the
+      CDDL or only the GPL Version 2, indicate your decision by adding
+      "[Contributor] elects to include this software in this
+      distribution under the [CDDL or GPL Version 2] license."  If you
+      don't indicate a single choice of license, a recipient has the
+      option to distribute your version of this file under either the
+      CDDL, the GPL Version 2 or to extend the choice of license to its
+      licensees as provided above.  However, if you add GPL Version 2
+      code and therefore, elected the GPL Version 2 license, then the
+      option applies only if the new code is made subject to such
+      option by the copyright holder.
+
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+      The Apache Software Foundation elects to include this software under the
+      CDDL license.
+    </xsd:documentation>
+  </xsd:annotation>
+
+  <xsd:annotation>
+    <xsd:documentation>
+
+      (C) Copyright International Business Machines Corporation 2002
+
+    </xsd:documentation>
+  </xsd:annotation>
+
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="port-component-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The port-component-ref element declares a client dependency
+        on the container for resolving a Service Endpoint Interface
+        to a WSDL port. It optionally associates the Service Endpoint
+        Interface with a particular port-component. This is only used
+        by the container for a Service.getPort(Class) method call.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="service-endpoint-interface"
+                   type="javaee:fully-qualified-classType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The service-endpoint-interface element defines a fully qualified
+            Java class that represents the Service Endpoint Interface of a
+            WSDL port.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="enable-mtom"
+                   type="javaee:true-falseType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Used to enable or disable SOAP MTOM/XOP mechanism on the client
+            side for a port-component.
+
+            Not to be specified for JAX-RPC runtime
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="port-component-link"
+                   type="javaee:string"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The port-component-link element links a port-component-ref
+            to a specific port-component required to be made available
+            by a service reference.
+
+            The value of a port-component-link must be the
+            port-component-name of a port-component in the same module
+            or another module in the same application unit. The syntax
+            for specification follows the syntax defined for ejb-link
+            in the EJB 2.0 specification.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:group name="service-refGroup">
+    <xsd:sequence>
+      <xsd:element name="service-ref"
+                   type="javaee:service-refType"
+                   minOccurs="0" maxOccurs="unbounded">
+        <xsd:key name="service-ref_handler-name-key">
+          <xsd:annotation>
+            <xsd:documentation>
+
+              Defines the name of the handler. The name must be unique
+              within the module.
+
+            </xsd:documentation>
+          </xsd:annotation>
+          <xsd:selector xpath="javaee:handler"/>
+          <xsd:field xpath="javaee:handler-name"/>
+        </xsd:key>
+      </xsd:element>
+    </xsd:sequence>
+  </xsd:group>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="service-refType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        The service-ref element declares a reference to a Web
+        service. It contains optional description, display name and
+        icons, a declaration of the required Service interface,
+        an optional WSDL document location, an optional set
+        of JAX-RPC mappings, an optional QName for the service element,
+        an optional set of Service Endpoint Interfaces to be resolved
+        by the container to a WSDL port, and an optional set of handlers.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:group ref="javaee:descriptionGroup"/>
+      <xsd:element name="service-ref-name"
+                   type="javaee:jndi-nameType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The service-ref-name element declares logical name that the
+            components in the module use to look up the Web service. It
+            is recommended that all service reference names start with
+            "service/".
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="service-interface"
+                   type="javaee:fully-qualified-classType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The service-interface element declares the fully qualified class
+            name of the JAX-RPC Service interface the client depends on.
+            In most cases the value will be javax.xml.rpc.Service.  A JAX-RPC
+            generated Service Interface class may also be specified.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="service-ref-type"
+                   type="javaee:fully-qualified-classType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The service-ref-type element declares the type of the service-ref
+            element that is injected or returned when a JNDI lookup is done.
+            This must be either a fully qualified name of Service class or
+            the fully qualified name of service endpoint interface class.
+            This is only used with JAX-WS runtime where the corresponding
+            @WebServiceRef annotation can be used to denote both a Service
+            or a Port.
+
+            If this is not specified, then the type of service-ref element
+            that is injected or returned when a JNDI lookup is done is
+            always a Service interface/class.
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="wsdl-file"
+                   type="javaee:xsdAnyURIType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The wsdl-file element contains the URI location of a WSDL
+            file. The location is relative to the root of the module.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="jaxrpc-mapping-file"
+                   type="javaee:pathType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The jaxrpc-mapping-file element contains the name of a file that
+            describes the JAX-RPC mapping between the Java interaces used by
+            the application and the WSDL description in the wsdl-file.  The
+            file name is a relative path within the module file.
+
+            This is not required when JAX-WS based runtime is used.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="service-qname"
+                   type="javaee:xsdQNameType"
+                   minOccurs="0" maxOccurs="1">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The service-qname element declares the specific WSDL service
+            element that is being refered to.  It is not specified if no
+            wsdl-file is declared.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="port-component-ref"
+                   type="javaee:port-component-refType"
+                   minOccurs="0" maxOccurs="unbounded">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The port-component-ref element declares a client dependency
+            on the container for resolving a Service Endpoint Interface
+            to a WSDL port. It optionally associates the Service Endpoint
+            Interface with a particular port-component. This is only used
+            by the container for a Service.getPort(Class) method call.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:choice>
+          <xsd:element name="handler"
+                       type="javaee:service-ref_handlerType"
+                       minOccurs="0" maxOccurs="unbounded">
+            <xsd:annotation>
+              <xsd:documentation>
+
+                Declares the handler for a port-component. Handlers can
+                access the init-param name/value pairs using the
+                HandlerInfo interface. If port-name is not specified, the
+                handler is assumed to be associated with all ports of the
+                service.
+
+                To be used with JAX-RPC based runtime only.
+
+              </xsd:documentation>
+            </xsd:annotation>
+          </xsd:element>
+          <xsd:element name="handler-chains"
+                       type="javaee:service-ref_handler-chainsType"
+                       minOccurs="0" maxOccurs="1">
+            <xsd:annotation>
+              <xsd:documentation>
+                 To be used with JAX-WS based runtime only.
+              </xsd:documentation>
+            </xsd:annotation>
+          </xsd:element>
+      </xsd:choice>
+
+      <xsd:group ref="javaee:resourceGroup"/>
+
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="service-ref_handler-chainType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+      The handler-chain element defines the handlerchain.
+      Handlerchain can be defined such that the handlers in the
+      handlerchain operate,all ports of a service, on a specific
+      port or on a list of protocol-bindings. The choice of elements
+      service-name-pattern, port-name-pattern and protocol-bindings
+      are used to specify whether the handlers in handler-chain are
+      for a service, port or protocol binding. If none of these
+      choices are specified with the handler-chain element then the
+      handlers specified in the handler-chain will be applied on
+      everything.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+
+      <xsd:choice minOccurs="0" maxOccurs="1">
+         <xsd:element name="service-name-pattern"
+                      type="javaee:service-ref_qname-pattern" />
+         <xsd:element name="port-name-pattern"
+                      type="javaee:service-ref_qname-pattern" />
+         <xsd:element name="protocol-bindings"
+                      type="javaee:service-ref_protocol-bindingListType"/>
+      </xsd:choice>
+
+      <xsd:element name="handler"
+                   type="javaee:service-ref_handlerType"
+                   minOccurs="1" maxOccurs="unbounded"/>
+    </xsd:sequence>
+
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="service-ref_handler-chainsType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+      The handler-chains element defines the handlerchains associated with this
+      service or service endpoint.
+
+      </xsd:documentation>
+    </xsd:annotation>
+
+    <xsd:sequence>
+      <xsd:element name="handler-chain"
+                   type="javaee:service-ref_handler-chainType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+    </xsd:sequence>
+
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:complexType name="service-ref_handlerType">
+    <xsd:annotation>
+      <xsd:documentation>
+
+        Declares the handler for a port-component. Handlers can access the
+        init-param name/value pairs using the HandlerInfo interface. If
+        port-name is not specified, the handler is assumed to be associated
+        with all ports of the service.
+
+        Used in: service-ref
+
+      </xsd:documentation>
+    </xsd:annotation>
+    <xsd:sequence>
+      <xsd:group ref="javaee:descriptionGroup"/>
+      <xsd:element name="handler-name"
+                   type="javaee:string">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Defines the name of the handler. The name must be unique
+            within the module.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="handler-class"
+                   type="javaee:fully-qualified-classType">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Defines a fully qualified class name for the handler
+            implementation.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+      <xsd:element name="init-param"
+                   type="javaee:param-valueType"
+                   minOccurs="0" maxOccurs="unbounded"/>
+
+      <xsd:element name="soap-header"
+                   type="javaee:xsdQNameType"
+                   minOccurs="0" maxOccurs="unbounded">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            Defines the QName of a SOAP header that will be processed
+            by the handler.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="soap-role"
+                   type="javaee:string"
+                   minOccurs="0" maxOccurs="unbounded">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The soap-role element contains a SOAP actor definition that
+            the Handler will play as a role.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+
+      <xsd:element name="port-name"
+                   type="javaee:string"
+                   minOccurs="0" maxOccurs="unbounded">
+        <xsd:annotation>
+          <xsd:documentation>
+
+            The port-name element defines the WSDL port-name that a
+            handler should be associated with.
+
+          </xsd:documentation>
+        </xsd:annotation>
+      </xsd:element>
+    </xsd:sequence>
+    <xsd:attribute name="id" type="xsd:ID"/>
+  </xsd:complexType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="service-ref_protocol-URIAliasType">
+     <xsd:annotation>
+        <xsd:documentation>
+           Defines the type that is used for specifying tokens that
+           start with ## which are used to alias existing standard
+           protocol bindings and support aliases for new standard
+           binding URIs that are introduced in future specifications.
+
+           The following tokens alias the standard protocol binding
+           URIs:
+
+           ##SOAP11_HTTP = "http://schemas.xmlsoap.org/wsdl/soap/http"
+           ##SOAP11_HTTP_MTOM =
+                 "http://schemas.xmlsoap.org/wsdl/soap/http?mtom=true"
+           ##SOAP12_HTTP = "http://www.w3.org/2003/05/soap/bindings/HTTP/"
+           ##SOAP12_HTTP_MTOM =
+                 "http://www.w3.org/2003/05/soap/bindings/HTTP/?mtom=true"
+           ##XML_HTTP = "http://www.w3.org/2004/08/wsdl/http"
+
+        </xsd:documentation>
+     </xsd:annotation>
+     <xsd:restriction base="xsd:token">
+        <xsd:pattern value="##.+"/>
+     </xsd:restriction>
+  </xsd:simpleType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="service-ref_protocol-bindingListType">
+     <xsd:annotation>
+        <xsd:documentation>
+           Defines the type used for specifying a list of
+           protocol-bindingType(s). For e.g.
+
+            ##SOAP11_HTTP ##SOAP12_HTTP ##XML_HTTP
+
+        </xsd:documentation>
+     </xsd:annotation>
+     <xsd:list itemType="javaee:service-ref_protocol-bindingType"/>
+  </xsd:simpleType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="service-ref_protocol-bindingType">
+     <xsd:annotation>
+        <xsd:documentation>
+           Defines the type used for specifying the URI for the
+           protocol binding used by the port-component.  For
+           portability one could use one of the following tokens that
+           alias the standard binding types:
+
+            ##SOAP11_HTTP
+            ##SOAP11_HTTP_MTOM
+            ##SOAP12_HTTP
+            ##SOAP12_HTTP_MTOM
+            ##XML_HTTP
+
+           Other specifications could define tokens that start with ##
+           to alias new standard binding URIs that are introduced.
+
+        </xsd:documentation>
+     </xsd:annotation>
+     <xsd:union memberTypes="xsd:anyURI javaee:service-ref_protocol-URIAliasType"/>
+  </xsd:simpleType>
+
+<!-- **************************************************** -->
+
+  <xsd:simpleType name="service-ref_qname-pattern">
+     <xsd:annotation>
+        <xsd:documentation>
+             This is used to specify the QName pattern in the
+             attribute service-name-pattern and port-name-pattern in
+             the handler-chain element
+
+             For example, the various forms acceptable here for
+             service-name-pattern attribute in handler-chain element
+             are :
+
+             Exact Name: service-name-pattern="ns1:EchoService"
+
+                 In this case, handlers specified in this
+                 handler-chain element will apply to all ports with
+                 this exact service name. The namespace prefix must
+                 have been declared in a namespace declaration
+                 attribute in either the start-tag of the element
+                 where the prefix is used or in an an ancestor
+                 element (i.e. an element in whose content the
+                 prefixed markup occurs)
+
+             Pattern : service-name-pattern="ns1:EchoService*"
+
+                 In this case, handlers specified in this
+                 handler-chain element will apply to all ports whose
+                 Service names are like EchoService1, EchoServiceFoo
+                 etc. The namespace prefix must have been declared in
+                 a namespace declaration attribute in either the
+                 start-tag of the element where the prefix is used or
+                 in an an ancestor element (i.e. an element in whose
+                 content the prefixed markup occurs)
+
+             Wild Card : service-name-pattern="*"
+
+                In this case, handlers specified in this handler-chain
+                element will apply to ports of all service names.
+
+            The same can be applied to port-name attribute in
+            handler-chain element.
+
+        </xsd:documentation>
+     </xsd:annotation>
+
+     <xsd:restriction base="xsd:token">
+        <xsd:pattern value="\*|([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*\*?"/>
+     </xsd:restriction>
+
+  </xsd:simpleType>
+
+</xsd:schema>
+
