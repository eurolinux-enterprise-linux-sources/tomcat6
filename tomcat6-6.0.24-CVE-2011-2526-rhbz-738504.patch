--- java/org/apache/catalina/connector/LocalStrings.properties.orig	2011-09-28 14:31:05.082016226 -0600
+++ java/org/apache/catalina/connector/LocalStrings.properties	2011-09-28 14:42:02.865971247 -0600
@@ -61,6 +61,8 @@
 coyoteRequest.parseParameters=Exception thrown whilst processing POSTed parameters
 coyoteRequest.postTooLarge=Parameters were not parsed because the size of the posted data was too big. Use the maxPostSize attribute of the connector to resolve this if the application should accept large POSTs.
 coyoteRequest.chunkedPostTooLarge=Parameters were not parsed because the size of the posted data was too big. Because this request was a chunked request, it could not be processed further. Use the maxPostSize attribute of the connector to resolve this if the application should accept large POSTs.
+coyoteRequest.sessionEndAccessFail=Exception triggerd ending access to session while recycling request
+coyoteRequest.sendfileNotCanonical=Unable to determin canonical name of file [{0}] specified for use with sendfile
 
 requestFacade.nullRequest=The request object has been recycled and is no longer associated with this facade
 
--- java/org/apache/catalina/connector/Request.java.orig	2011-09-28 14:31:25.232014848 -0600
+++ java/org/apache/catalina/connector/Request.java	2011-09-28 14:50:35.716936177 -0600
@@ -18,7 +18,7 @@
 
 package org.apache.catalina.connector;
 
-
+import java.io.File;
 import java.io.InputStream;
 import java.io.IOException;
 import java.io.BufferedReader;
@@ -1423,6 +1423,7 @@
             return;
         }
 
+
         Object oldValue = null;
         boolean replaced = false;
 
@@ -1433,7 +1434,27 @@
             return;
         }
 
-        oldValue = attributes.put(name, value);
+		  // Do the security check before any updates are made
+		  if (Globals.IS_SECURITY_ENABLED &&
+			  name.equals("org.apache.tomcat.sendfile.filename")) {
+			  // Use the canonical file name t avoid any possible symlink and
+			  // relative path issues
+			  String canonicalPath;
+			  try {
+				  canonicalPath = new File(value.toString()).getCanonicalPath();
+			  } catch (IOException ex) {
+				  throw new SecurityException(sm.getString(
+				  "coyoteRequest.sendfileNotCanonical", value), ex);
+			  }
+			  // Sendfile is performed in Tomcat's security context so need to
+			  // check if the web app is permitted to access the file while
+			  // still in the webapp's security context
+			  System.getSecurityManager().checkRead(canonicalPath);
+			  // Update the value so the canonical path is used
+			  value = canonicalPath;
+		  }
+        
+		  oldValue = attributes.put(name, value);
         if (oldValue != null) {
             replaced = true;
         }
--- java/org/apache/catalina/servlets/DefaultServlet.java.orig	2011-09-28 14:31:40.979013770 -0600
+++ java/org/apache/catalina/servlets/DefaultServlet.java	2011-09-28 14:52:11.151929651 -0600
@@ -1533,7 +1533,6 @@
                 request.setAttribute("org.apache.tomcat.sendfile.start", new Long(range.start));
                 request.setAttribute("org.apache.tomcat.sendfile.end", new Long(range.end + 1));
             }
-            request.setAttribute("org.apache.tomcat.sendfile.token", this);
             return true;
         } else {
             return false;
--- java/org/apache/coyote/http11/Http11AprProcessor.java.orig	2011-09-28 14:32:04.723012147 -0600
+++ java/org/apache/coyote/http11/Http11AprProcessor.java	2011-09-28 14:57:20.307908512 -0600
@@ -910,8 +910,19 @@
                 sendfileData.socket = socket;
                 sendfileData.keepAlive = keepAlive;
                 if (!endpoint.getSendfile().add(sendfileData)) {
-                    openSocket = true;
-                    break;
+						 if (sendfileData.socket == 0) {
+							 // Didn't send all the data but the socket is no longer
+							 // set. Something when wrong. Close the connection.
+							 // Too late to set status code
+							 if (log.isDebugEnabled()) {
+								 log.debug(sm.getString(
+								 "http11processor.sendfile.error"));
+							 }
+							 error = true;
+						 } else {
+							 openSocket = true;
+						 }
+                  break;
                 }
             }
             
--- java/org/apache/coyote/http11/LocalStrings.properties.orig	2011-09-28 14:32:27.419010596 -0600
+++ java/org/apache/coyote/http11/LocalStrings.properties	2011-09-28 14:58:52.924902179 -0600
@@ -56,7 +56,7 @@
 http11processor.socket.info=Exception getting socket information
 http11processor.socket.ssl=Exception getting SSL attributes
 http11processor.socket.timeout=Error setting socket timeout
-
+http11processor.sendfile.error=Error sending data using sendfile. May be caused by invalid request attributes for start/end points
 #
 # InternalInputBuffer
 #
--- java/org/apache/tomcat/util/net/AprEndpoint.java.orig	2011-09-28 14:32:38.763009821 -0600
+++ java/org/apache/tomcat/util/net/AprEndpoint.java	2011-09-28 15:02:01.766889266 -0600
@@ -1700,7 +1700,9 @@
                                                data.pos, data.end - data.pos, 0);
                     if (nw < 0) {
                         if (!(-nw == Status.EAGAIN)) {
-                            Socket.destroy(data.socket);
+									Pool.destroy(data.fdpool);
+									// No need to close socket, this will be done by
+									// calling code since data.socket=0
                             data.socket = 0;
                             return false;
                         } else {
--- java/org/apache/tomcat/util/net/NioEndpoint.java.orig	2011-09-28 14:32:50.589009012 -0600
+++ java/org/apache/tomcat/util/net/NioEndpoint.java	2011-09-29 09:56:25.861235044 -0600
@@ -1732,7 +1732,14 @@
                         sd.pos += written;
                         sd.length -= written;
                         attachment.access();
-                    }
+                    } else {
+							  // Unusual not to be able to transfer any bytes
+							  // Check the length was set correctly
+							  if (sd.fchannel.size() <= sd.pos) {
+								  throw new IOException("Send file configured to "+
+								  "send more data than was available");
+							  }
+						 }
                 }
                 if ( sd.length <= 0 && sc.getOutboundRemaining()<=0) {
                     if (log.isDebugEnabled()) {
@@ -1756,6 +1763,7 @@
                             log.debug("Send file connection is being closed");
                         }
                         cancelledKey(sk,SocketStatus.STOP,false);
+								return false;
                     }
                 } else if ( attachment.interestOps() == 0 && reg ) {
                     if (log.isDebugEnabled()) {
--- webapps/docs/changelog.xml.orig	2011-09-28 14:33:05.895007964 -0600
+++ webapps/docs/changelog.xml	2011-09-29 10:01:04.315216002 -0600
@@ -141,6 +141,15 @@
         <bug>48470</bug>: Ensure Tomcat does not lock up if shut down under
         load. (markt)
       </fix>
+		<fix>
+		   Fix CVE-2011-2526. Prevent against infinit loops (HTTP NIO) and 
+			crashes (HTTP APR) if sendfile is configured to send more data
+			than is available in the file. (markt)
+		</fix>
+		<fix>
+		   Prevent NPEs when a socket is closed in non-error conditions after
+			sendfile processing when using the HTTP NIO connector. (markt)
+		</fix>
     </changelog>
   </subsection>
   <subsection name="Jasper">
