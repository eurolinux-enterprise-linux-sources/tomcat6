--- webapps/docs/changelog.xml.orig	2017-02-20 17:09:46.016436084 -0500
+++ webapps/docs/changelog.xml	2017-02-20 17:10:28.618347614 -0500
@@ -43,7 +43,7 @@
 <!-- Section names:
  General, Catalina, Coyote, Jasper, Cluster, Web applications, Other
 -->
-<section name="Tomcat 6.0.24-100 (csutherl)">
+<section name="Tomcat 6.0.24-105 (csutherl)">
   <subsection name="Catalina">
     <changelog>
       <add>
@@ -60,6 +60,10 @@
         <bug>60409</bug>: When unable to complete sendfile request, ensure the
         Processor will be added to the cache only once. (markt/violetagg)
       </fix>
+      <fix>
+        <bug>57544</bug>: Fix potential infinite loop when preparing a kept
+        alive HTTP connection for the next request. (markt)
+      </fix>
     </changelog>
   </subsection>
 </section>
--- java/org/apache/coyote/http11/InternalNioInputBuffer.java.orig	2017-02-20 15:36:51.051214417 -0500
+++ java/org/apache/coyote/http11/InternalNioInputBuffer.java	2017-02-20 16:28:34.480568613 -0500
@@ -374,16 +374,12 @@
         request.recycle();
 
         // Copy leftover bytes to the beginning of the buffer
-        if (lastValid - pos > 0) {
-            int npos = 0;
-            int opos = pos;
-            while (lastValid - opos > opos - npos) {
-                System.arraycopy(buf, opos, buf, npos, opos - npos);
-                npos += pos;
-                opos += pos;
-            }
-            System.arraycopy(buf, opos, buf, npos, lastValid - opos);
+        if (lastValid - pos > 0 && pos > 0) {
+            System.arraycopy(buf, pos, buf, 0, lastValid - pos);
         }
+        // Always reset pos to zero
+        lastValid = lastValid - pos;
+        pos = 0;
 
         // Recycle filters
         for (int i = 0; i <= lastActiveFilter; i++) {
@@ -391,8 +387,6 @@
         }
 
         // Reset pointers
-        lastValid = lastValid - pos;
-        pos = 0;
         lastActiveFilter = -1;
         parsingHeader = true;
         headerParsePos = HeaderParsePosition.HEADER_START;
@@ -403,7 +397,6 @@
         parsingRequestLineQPos = -1;
         headerData.recycle();
         swallowInput = true;
-
     }
 
 
--- java/org/apache/coyote/http11/InternalAprInputBuffer.java.orig	2017-02-20 15:36:51.052214415 -0500
+++ java/org/apache/coyote/http11/InternalAprInputBuffer.java	2017-02-20 16:33:35.575943341 -0500
@@ -283,16 +283,12 @@
         request.recycle();
 
         // Copy leftover bytes to the beginning of the buffer
-        if (lastValid - pos > 0) {
-            int npos = 0;
-            int opos = pos;
-            while (lastValid - opos > opos - npos) {
-                System.arraycopy(buf, opos, buf, npos, opos - npos);
-                npos += pos;
-                opos += pos;
-            }
-            System.arraycopy(buf, opos, buf, npos, lastValid - opos);
+        if (lastValid - pos > 0 && pos > 0) {
+            System.arraycopy(buf, pos, buf, 0, lastValid - pos);
         }
+        // Always reset pos to zero
+        lastValid = lastValid - pos;
+        pos = 0;
 
         // Recycle filters
         for (int i = 0; i <= lastActiveFilter; i++) {
@@ -300,12 +296,9 @@
         }
 
         // Reset pointers
-        lastValid = lastValid - pos;
-        pos = 0;
         lastActiveFilter = -1;
         parsingHeader = true;
         swallowInput = true;
-
     }
 
 
--- java/org/apache/coyote/http11/InternalInputBuffer.java.orig	2017-02-20 15:36:51.052214415 -0500
+++ java/org/apache/coyote/http11/InternalInputBuffer.java	2017-02-20 15:40:51.295683967 -0500
@@ -287,16 +287,12 @@
         request.recycle();
 
         // Copy leftover bytes to the beginning of the buffer
-        if (lastValid - pos > 0) {
-            int npos = 0;
-            int opos = pos;
-            while (lastValid - opos > opos - npos) {
-                System.arraycopy(buf, opos, buf, npos, opos - npos);
-                npos += pos;
-                opos += pos;
-            }
-            System.arraycopy(buf, opos, buf, npos, lastValid - opos);
+        if (lastValid - pos > 0 && pos > 0) {
+            System.arraycopy(buf, pos, buf, 0, lastValid - pos);
         }
+        // Always reset pos to zero
+        lastValid = lastValid - pos;
+        pos = 0;
 
         // Recycle filters
         for (int i = 0; i <= lastActiveFilter; i++) {
@@ -304,12 +300,9 @@
         }
 
         // Reset pointers
-        lastValid = lastValid - pos;
-        pos = 0;
         lastActiveFilter = -1;
         parsingHeader = true;
         swallowInput = true;
-
     }
 
 
