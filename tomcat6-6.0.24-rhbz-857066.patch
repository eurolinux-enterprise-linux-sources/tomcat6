--- java/org/apache/tomcat/util/net/JIoEndpoint.java.orig	2012-12-03 16:40:51.678544779 -0700
+++ java/org/apache/tomcat/util/net/JIoEndpoint.java	2012-12-03 16:42:45.464580629 -0700
@@ -752,20 +752,19 @@
      */
     protected Worker getWorkerThread() {
         // Allocate a new worker thread
-        Worker workerThread = createWorkerThread();
-        while (workerThread == null) {
-            try {
-                synchronized (workers) {
-                    workers.wait();
-                }
-            } catch (InterruptedException e) {
-                // Ignore
-            }
-            workerThread = createWorkerThread();
-        }
-        return workerThread;
-    }
-
+		synchronized(workers) {
+			Worker workerThread;
+			while ((workerThread = createWorkerThread()) == null)
+			{
+				try {
+				  workers.wait();
+				} catch (InterruptedException e) {
+						 // Ignore
+				}
+			}
+      	return workerThread;
+		}
+   }
 
     /**
      * Recycle the specified Processor so that it can be used again.
--- java/org/apache/tomcat/util/net/NioEndpoint.java.orig	2012-12-03 16:41:09.326551139 -0700
+++ java/org/apache/tomcat/util/net/NioEndpoint.java	2012-12-03 16:43:00.972586554 -0700
@@ -1220,21 +1220,19 @@
      */
     protected Worker getWorkerThread() {
         // Allocate a new worker thread
-        Worker workerThread = createWorkerThread();
-        while (workerThread == null) {
-            try {
-                synchronized (workers) {
-                    workerThread = createWorkerThread();
-                    if ( workerThread == null ) workers.wait();
-                }
-            } catch (InterruptedException e) {
-                // Ignore
-            }
-            if ( workerThread == null ) workerThread = createWorkerThread();
-        }
-        return workerThread;
-    }
-
+		synchronized(workers) {
+			Worker workerThread;
+			while ((workerThread = createWorkerThread()) == null)
+			{
+				try {
+				  workers.wait();
+				} catch (InterruptedException e) {
+						 // Ignore
+				}
+			}
+      	return workerThread;
+		}
+   }
 
     /**
      * Recycle the specified Processor so that it can be used again.
--- java/org/apache/tomcat/util/net/AprEndpoint.java.orig	2012-12-03 16:40:32.778536052 -0700
+++ java/org/apache/tomcat/util/net/AprEndpoint.java	2012-12-03 16:42:25.069573799 -0700
@@ -1017,19 +1017,19 @@
      */
     protected Worker getWorkerThread() {
         // Allocate a new worker thread
-        Worker workerThread = createWorkerThread();
-        while (workerThread == null) {
-            try {
-                synchronized (workers) {
-                    workers.wait();
-                }
-            } catch (InterruptedException e) {
-                // Ignore
-            }
-            workerThread = createWorkerThread();
-        }
-        return workerThread;
-    }
+		synchronized(workers) {
+			Worker workerThread;
+			while ((workerThread = createWorkerThread()) == null)
+			{
+				try {
+				  workers.wait();
+				} catch (InterruptedException e) {
+						 // Ignore
+				}
+			}
+      	return workerThread;
+		}
+   }
 
 
     /**
--- java/org/apache/catalina/util/HexUtils.java.orig	2012-12-04 12:40:46.968999809 -0700
+++ java/org/apache/catalina/util/HexUtils.java	2012-12-04 12:42:22.482322880 -0700
@@ -30,26 +30,6 @@
 public final class HexUtils {
     // Code from Ajp11, from Apache's JServ
 
-    // Table for HEX to DEC byte translation
-    public static final int[] DEC = {
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        00, 01, 02, 03, 04, 05, 06, 07,  8,  9, -1, -1, -1, -1, -1, -1,
-        -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-    };
-
 
 
     /**
@@ -122,42 +102,6 @@
     }
 
     /**
-     * Convert 4 hex digits to an int, and return the number of converted
-     * bytes.
-     *
-     * @param hex Byte array containing exactly four hexadecimal digits
-     *
-     * @exception IllegalArgumentException if an invalid hexadecimal digit
-     *  is included
-     */
-    public static int convert2Int( byte[] hex ) {
-        // Code from Ajp11, from Apache's JServ
-
-        // assert b.length==4
-        // assert valid data
-        int len;
-        if(hex.length < 4 ) return 0;
-        if( DEC[hex[0]]<0 )
-            throw new IllegalArgumentException(sm.getString("hexUtil.bad"));
-        len = DEC[hex[0]];
-        len = len << 4;
-        if( DEC[hex[1]]<0 )
-            throw new IllegalArgumentException(sm.getString("hexUtil.bad"));
-        len += DEC[hex[1]];
-        len = len << 4;
-        if( DEC[hex[2]]<0 )
-            throw new IllegalArgumentException(sm.getString("hexUtil.bad"));
-        len += DEC[hex[2]];
-        len = len << 4;
-        if( DEC[hex[3]]<0 )
-            throw new IllegalArgumentException(sm.getString("hexUtil.bad"));
-        len += DEC[hex[3]];
-        return len;
-    }
-
-
-
-    /**
      * [Private] Convert the specified value (0 .. 15) to the corresponding
      * hexadecimal digit.
      *
--- java/org/apache/coyote/ajp/AjpAprProcessor.java.orig	2012-12-04 12:44:56.094819876 -0700
+++ java/org/apache/coyote/ajp/AjpAprProcessor.java	2012-12-04 12:46:35.491150032 -0700
@@ -109,7 +109,7 @@
         outputBuffer = ByteBuffer.allocateDirect(packetSize * 2);
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.getDec('0');
 
         // Cause loading of HttpMessages
         HttpMessages.getMessage(200);
@@ -922,7 +922,7 @@
             int port = 0;
             int mult = 1;
             for (int i = valueL - 1; i > colonPos; i--) {
-                int charValue = HexUtils.DEC[(int) valueB[i + valueS]];
+                int charValue = HexUtils.getDec( valueB[i + valueS]);
                 if (charValue == -1) {
                     // Invalid character
                     error = true;
--- java/org/apache/coyote/ajp/AjpProcessor.java.orig	2012-12-04 12:50:26.845872894 -0700
+++ java/org/apache/coyote/ajp/AjpProcessor.java	2012-12-04 12:53:12.301386726 -0700
@@ -103,7 +103,7 @@
                          0, getBodyMessage.getLen());
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.getDec('0');
 
         // Cause loading of HttpMessages
         HttpMessages.getMessage(200);
@@ -927,7 +927,7 @@
             int port = 0;
             int mult = 1;
             for (int i = valueL - 1; i > colonPos; i--) {
-                int charValue = HexUtils.DEC[(int) valueB[i + valueS]];
+                int charValue = HexUtils.getDec( valueB[i + valueS]);
                 if (charValue == -1) {
                     // Invalid character
                     error = true;
--- java/org/apache/coyote/http11/Http11AprProcessor.java.orig	2012-12-04 12:54:29.197633776 -0700
+++ java/org/apache/coyote/http11/Http11AprProcessor.java	2012-12-04 12:56:49.286057889 -0700
@@ -107,7 +107,7 @@
         initializeFilters();
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.getDec('0');
 
         // Cause loading of FastHttpDateFormat
         FastHttpDateFormat.getCurrentDate();
@@ -1506,7 +1506,7 @@
             int port = 0;
             int mult = 1;
             for (int i = valueL - 1; i > colonPos; i--) {
-                int charValue = HexUtils.DEC[(int) valueB[i + valueS]];
+                int charValue = HexUtils.getDec(valueB[i + valueS]);
                 if (charValue == -1) {
                     // Invalid character
                     error = true;
--- java/org/apache/coyote/http11/Http11NioProcessor.java.orig	2012-12-04 12:59:36.414582564 -0700
+++ java/org/apache/coyote/http11/Http11NioProcessor.java	2012-12-04 13:02:10.013137140 -0700
@@ -110,7 +110,7 @@
         initializeFilters();
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.getDec('0');
 
         // Cause loading of FastHttpDateFormat
         FastHttpDateFormat.getCurrentDate();
@@ -1523,7 +1523,7 @@
             int port = 0;
             int mult = 1;
             for (int i = valueL - 1; i > colonPos; i--) {
-                int charValue = HexUtils.DEC[(int) valueB[i + valueS]];
+                int charValue = HexUtils.getDec( valueB[i + valueS]);
                 if (charValue == -1) {
                     // Invalid character
                     error = true;
--- java/org/apache/coyote/http11/Http11Processor.java.orig	2012-12-04 13:05:34.536893646 -0700
+++ java/org/apache/coyote/http11/Http11Processor.java	2012-12-04 13:07:59.856431038 -0700
@@ -101,7 +101,7 @@
         initializeFilters();
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.getDec('0');
 
     }
 
@@ -1404,7 +1404,7 @@
             int port = 0;
             int mult = 1;
             for (int i = valueL - 1; i > colonPos; i--) {
-                int charValue = HexUtils.DEC[(int) valueB[i + valueS]];
+                int charValue = HexUtils.getDec(valueB[i + valueS]);
                 if (charValue == -1) {
                     // Invalid character
                     error = true;
--- java/org/apache/coyote/http11/filters/ChunkedInputFilter.java.orig	2012-12-04 13:10:29.188971806 -0700
+++ java/org/apache/coyote/http11/filters/ChunkedInputFilter.java	2012-12-04 13:12:22.271389185 -0700
@@ -281,10 +281,11 @@
                 trailer = true;
             } else if (!trailer) { 
                 //don't read data after the trailer
-                if (HexUtils.DEC[buf[pos]] != -1) {
+					 int charValue  = HexUtils.getDec(buf[pos]);
+					 if (charValue != -1)  {
                     readDigit = true;
                     result *= 16;
-                    result += HexUtils.DEC[buf[pos]];
+                    result += charValue;
                 } else {
                     //we shouldn't allow invalid, non hex characters
                     //in the chunked header
--- java/org/apache/jk/common/HandlerRequest.java.orig	2012-12-04 13:15:20.555014119 -0700
+++ java/org/apache/jk/common/HandlerRequest.java	2012-12-04 13:16:26.213246745 -0700
@@ -674,7 +674,7 @@
             int port = 0;
             int mult = 1;
             for (int i = valueL - 1; i > colonPos; i--) {
-                int charValue = HexUtils.DEC[(int) valueB[i + valueS]];
+                int charValue = HexUtils.getDec(valueB[i + valueS]);
                 if (charValue == -1) {
                     // Invalid character
                     throw new CharConversionException("Invalid char in port: " + valueB[i + valueS]); 
--- java/org/apache/tomcat/util/buf/HexUtils.java.orig	2012-12-04 13:17:44.780432238 -0700
+++ java/org/apache/tomcat/util/buf/HexUtils.java	2012-12-04 13:25:59.275459386 -0700
@@ -37,23 +37,11 @@
     /**
      *  Table for HEX to DEC byte translation.
      */
-    public static final int[] DEC = {
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+    private static final int[] DEC = {
         00, 01, 02, 03, 04, 05, 06, 07,  8,  9, -1, -1, -1, -1, -1, -1,
         -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+		  -1, 10, 11, 12, 13, 14, 15,
     };
 
 
@@ -75,6 +63,14 @@
 
     // --------------------------------------------------------- Static Methods
 
+	public static int getDec(int index) {
+		// Fast for correct values, slower for incorrect ones
+		try {
+			return DEC[index - '0'];
+		} catch (ArrayIndexOutOfBoundsException ex) {
+			return -1;
+		}
+	}
 
     /**
      * Convert a String of hexadecimal digits into the corresponding
@@ -146,6 +142,7 @@
      *
      * @exception IllegalArgumentException if an invalid hexadecimal digit
      *  is included
+	  *  @deprecated Not used, will be removed in Tomcat7
      */
     public static int convert2Int( byte[] hex ) {
 	// Code from Ajp11, from Apache's JServ
@@ -154,21 +151,21 @@
 	// assert valid data
 	int len;
 	if(hex.length < 4 ) return 0;
-	if( DEC[hex[0]]<0 )
+	if( getDec(hex[0]) <0 )
 	    throw new IllegalArgumentException(sm.getString("hexUtil.bad"));
-	len = DEC[hex[0]];
+	len = getDec(hex[0]);
 	len = len << 4;
-	if( DEC[hex[1]]<0 )
+	if( getDec(hex[1]) <0 )
 	    throw new IllegalArgumentException(sm.getString("hexUtil.bad"));
-	len += DEC[hex[1]];
+	len += getDec(hex[1]);
 	len = len << 4;
-	if( DEC[hex[2]]<0 )
+	if( getDec(hex[2]) <0 )
 	    throw new IllegalArgumentException(sm.getString("hexUtil.bad"));
-	len += DEC[hex[2]];
+	len += getDec(hex[2]);
 	len = len << 4;
-	if( DEC[hex[3]]<0 )
+	if( getDec(hex[3])<0 )
 	    throw new IllegalArgumentException(sm.getString("hexUtil.bad"));
-	len += DEC[hex[3]];
+	len += getDec(hex[3]);
 	return len;
     }
 
--- webapps/docs/changelog.xml.orig	2012-12-04 13:35:32.610626481 -0700
+++ webapps/docs/changelog.xml	2012-12-04 13:37:23.684884579 -0700
@@ -601,6 +601,10 @@
   </subsection>
   <subsection name="Coyote">
     <changelog>
+	 	<fix>
+		<bug>42181</bug>: Better handling of edge conditions in chunk header
+		processing. Red Hat rhbz-857066 ported patch to 6.0.24.
+		</fix>
       <update>Implement <code>socket.unlockTimeout</code> attribute for NIO connector.</update>
       <update>
         Update version of native bundled in Windows installer
