--- webapps/docs/changelog.xml.orig	2013-02-13 10:19:38.249774302 -0700
+++ webapps/docs/changelog.xml	2013-02-13 10:22:52.860746638 -0700
@@ -36,6 +36,13 @@
 <section name="Tomcat 6.0.24 (jfclere)">
   <subsection name="Catalina">
     <changelog>
+
+       <fix>
+			<bug>52858</bug>: Fix high CPU load with SSL, NIO and sendfile when
+			client breaks the connection before reading all the requested data.
+			(fhanik/kkolinko) CVE-2012-4534 patch backported to 6.0.24 by
+			Red Hat
+		</fix>	 
 	   <fix>
 	      Various improvements to the Digest authenticator including
 			<bug>52954</bug>, the disabling caching of an authenticated
--- java/org/apache/tomcat/util/net/NioEndpoint.java.orig	2013-02-12 13:33:41.431863209 -0700
+++ java/org/apache/tomcat/util/net/NioEndpoint.java	2013-02-12 13:56:53.419953654 -0700
@@ -1706,8 +1706,14 @@
         public boolean processSendfile(SelectionKey sk, KeyAttachment attachment, boolean reg, boolean event) {
             NioChannel sc = null;
             try {
-                //unreg(sk,attachment);//only do this if we do process send file on a separate thread
+					unreg(sk, attachment, sk.readyOps());
                 SendfileData sd = attachment.getSendfileData();
+
+					 if (log.isTraceEnabled()) {
+						 log.trace("Processing send file for: " + sd.fileName);
+					 }
+
+					 // setup the file channel
                 if ( sd.fchannel == null ) {
                     File f = new File(sd.fileName);
                     if ( !f.exists() ) {
@@ -1716,10 +1722,14 @@
                     }
                     sd.fchannel = new FileInputStream(f).getChannel();
                 }
+
+					 // configure output channel
                 sc = attachment.getChannel();
                 sc.setSendFile(true);
+					 // ssl channel is slightly different
                 WritableByteChannel wc =(WritableByteChannel) ((sc instanceof SecureNioChannel)?sc:sc.getIOChannel());
-                
+               
+					// we still have data in the buffer 
                 if (sc.getOutboundRemaining()>0) {
                     if (sc.flushOutbound()) {
                         attachment.access();
@@ -1746,16 +1756,14 @@
                     attachment.setSendfileData(null);
                     try {sd.fchannel.close();}catch(Exception ignore){}
                     if ( sd.keepAlive ) {
-                        if (reg) {
-                            if (log.isDebugEnabled()) {
-                                log.debug("Connection is keep alive, registering back for OP_READ");
-                            }
-                            if (event) {
-                                this.add(attachment.getChannel(),SelectionKey.OP_READ);
-                            } else {
-                                reg(sk,attachment,SelectionKey.OP_READ);
-                            }
-                        }
+							  if (log.isDebugEnabled()) {
+								  log.debug("Connection is keep alive, registering back for OP_READ");
+							  }
+							  if (event) {
+								  this.add(attachment.getChannel(), SelectionKey.OP_READ);
+							  } else {
+								  reg(sk, attachment, SelectionKey.OP_READ);
+                       }
                     } else {
                         if (log.isDebugEnabled()) {
                             log.debug("Send file connection is being closed");
@@ -1763,9 +1771,9 @@
                         cancelledKey(sk,SocketStatus.STOP,false);
 								return false;
                     }
-                } else if ( attachment.interestOps() == 0 && reg ) {
+                } else {
                     if (log.isDebugEnabled()) {
-                        log.debug("OP_WRITE for sendilfe:"+sd.fileName);
+                        log.debug("OP_WRITE for sendilfe:" + sd.fileName);
                     }
                     if (event) {
                         add(attachment.getChannel(),SelectionKey.OP_WRITE);
